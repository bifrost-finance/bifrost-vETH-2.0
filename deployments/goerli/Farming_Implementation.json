{
  "address": "0x6C536d624Bfb9B873FC0678d6DcC821f7b72b203",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Charged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "name": "ClaimableBlockUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "farmingToken",
          "type": "address"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "WithdrawRewards",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farmingToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardPerBlock",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimableInterval",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "charge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getPeriodsSinceStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "periods",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "farmingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardPerBlock",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "accRewardPerShare",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getRemaingRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "remainingRewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "pending",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardDebt",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "nextClaimableBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "rewards",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "nextClaimableBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_farmingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardPerBlock",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "name": "setClaimableBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_farmingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdca35299817b37c9e6b2a5f19303572ed69d7a541d36e0be4348be3d05b73b46",
  "receipt": {
    "to": null,
    "from": "0x976Cf43c894BA43cf096DA8C1427f6a51b724BB9",
    "contractAddress": "0x6C536d624Bfb9B873FC0678d6DcC821f7b72b203",
    "transactionIndex": 47,
    "gasUsed": "2617457",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0a0a4eded60b475eb602c50fcef6d531b73f24b7dc68e7530818d08897753e09",
    "transactionHash": "0xdca35299817b37c9e6b2a5f19303572ed69d7a541d36e0be4348be3d05b73b46",
    "logs": [],
    "blockNumber": 8752780,
    "cumulativeGasUsed": "5699003",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2bd310aca57d986ae1a85b130c94c097",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Charged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"ClaimableBlockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmingToken\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawRewards\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmingToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimableInterval\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"charge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPeriodsSinceStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periods\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farmingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlock\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"accRewardPerShare\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getRemaingRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"remainingRewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"pending\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardDebt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nextClaimableBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nextClaimableBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_farmingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setClaimableBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_farmingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Farming.sol\":\"Farming\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/Farming.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// This contract is a copy from Zenlink's Farming contract\\n// Link: https://github.com/zenlinkpro/zenlink-evm-contracts/blob/main/contracts/periphery/Farming.sol\\n\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {SafeMathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\ncontract Farming is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeMathUpgradeable for uint256;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many farming tokens that user has provided.\\n        uint256[] rewardDebt; // Reward debt. See explanation below.\\n        // pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\\n        // Whenever a user stakes or redeems farming tokens to a pool. Here's what happens:\\n        //   1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User add pending reward to his/her info.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n        uint256[] pending; // Pending rewards.\\n        uint256 nextClaimableBlock; // Next Block user can claim rewards.\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        address farmingToken; // Address of farming token contract.\\n        address[] rewardTokens; // Reward tokens.\\n        uint256[] rewardPerBlock; // Reward tokens created per block.\\n        uint256[] accRewardPerShare; // Accumulated rewards per share, times 1e12.\\n        uint256[] remainingRewards; // remaining rewards in the pool.\\n        uint256 amount; // amount of farming token.\\n        uint256 lastRewardBlock; // Last block number that pools updated.\\n        uint256 startBlock; // Start block of pools.\\n        uint256 claimableInterval; // How many blocks of rewards can be claimed.\\n    }\\n    // Info of each pool.\\n    PoolInfo[] private poolInfo;\\n    // Info of each user that stakes farming tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) private userInfo;\\n\\n    event PoolAdded(address indexed farmingToken);\\n    event ClaimableBlockUpdated(uint256 indexed pid, uint256 interval);\\n    event Charged(uint256 indexed pid, address[] rewards, uint256[] amounts);\\n    event WithdrawRewards(uint256 indexed pid, address[] rewards, uint256[] amounts);\\n    event Stake(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Redeem(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Claim(address indexed user, uint256 indexed pid, address[] rewards, uint256[] amounts);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    function initialize() public initializer {\\n        super.__Ownable_init();\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new farming token to the pool. Can only be called by the admin.\\n    // XXX DO NOT add the same farming token more than once. Rewards will be messed up if you do.\\n    function add(\\n        address _farmingToken,\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardPerBlock,\\n        uint256 _startBlock,\\n        uint256 _claimableInterval\\n    ) external onlyOwner {\\n        require(_rewardTokens.length == _rewardPerBlock.length, \\\"INVALID_REWARDS\\\");\\n        uint256 lastRewardBlock = block.number > _startBlock ? block.number : _startBlock;\\n        uint256[] memory accRewardPerShare = new uint256[](_rewardTokens.length);\\n        uint256[] memory remainingRewards = new uint256[](_rewardTokens.length);\\n        poolInfo.push(\\n            PoolInfo({\\n                farmingToken: _farmingToken,\\n                rewardTokens: _rewardTokens,\\n                rewardPerBlock: _rewardPerBlock,\\n                accRewardPerShare: accRewardPerShare,\\n                remainingRewards: remainingRewards,\\n                amount: 0,\\n                lastRewardBlock: lastRewardBlock,\\n                startBlock: _startBlock,\\n                claimableInterval: _claimableInterval\\n            })\\n        );\\n        emit PoolAdded(_farmingToken);\\n    }\\n\\n    // Update the given pool's rewardPerBlock. Can only be called by the admin.\\n    function set(uint256 _pid, uint256[] memory _rewardPerBlock, bool _withUpdate) external onlyOwner {\\n        if (_withUpdate) {\\n            updatePool(_pid);\\n        }\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(_rewardPerBlock.length == pool.rewardPerBlock.length, \\\"INVALID_REWARDS\\\");\\n        pool.rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n    function setClaimableBlock(uint256 _pid, uint256 _interval) external onlyOwner {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        pool.claimableInterval = _interval;\\n        emit ClaimableBlockUpdated(_pid, _interval);\\n    }\\n\\n    // Charge the given pool's rewards. Can only be called by the admin.\\n    function charge(uint256 _pid, uint256[] memory _amounts) external onlyOwner {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(_amounts.length == pool.rewardTokens.length, \\\"INVALID_AMOUNTS\\\");\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            if (_amounts[i] > 0) {\\n                IERC20Upgradeable(pool.rewardTokens[i]).safeTransferFrom(msg.sender, address(this), _amounts[i]);\\n                pool.remainingRewards[i] = pool.remainingRewards[i].add(_amounts[i]);\\n            }\\n        }\\n        emit Charged(_pid, pool.rewardTokens, _amounts);\\n    }\\n\\n    // Withdraw the given pool's rewards. Can only be called by the admin.\\n    function withdrawRewards(uint256 _pid, uint256[] memory _amounts) external onlyOwner {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(_amounts.length == pool.rewardTokens.length, \\\"INVALID_AMOUNTS\\\");\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            require(_amounts[i] <= pool.remainingRewards[i], \\\"INVALID_AMOUNT\\\");\\n            if (_amounts[i] > 0) {\\n                IERC20Upgradeable(pool.rewardTokens[i]).safeTransfer(msg.sender, _amounts[i]);\\n                pool.remainingRewards[i] = pool.remainingRewards[i].sub(_amounts[i]);\\n            }\\n        }\\n        emit WithdrawRewards(_pid, pool.rewardTokens, _amounts);\\n    }\\n\\n    // View function to see the given pool's info.\\n    function getPoolInfo(\\n        uint256 _pid\\n    )\\n        external\\n        view\\n        returns (\\n            address farmingToken,\\n            uint256 amount,\\n            address[] memory rewardTokens,\\n            uint256[] memory rewardPerBlock,\\n            uint256[] memory accRewardPerShare,\\n            uint256 lastRewardBlock,\\n            uint256 startBlock,\\n            uint256 claimableInterval\\n        )\\n    {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        farmingToken = pool.farmingToken;\\n        amount = pool.amount;\\n        rewardTokens = pool.rewardTokens;\\n        rewardPerBlock = pool.rewardPerBlock;\\n        accRewardPerShare = pool.accRewardPerShare;\\n        lastRewardBlock = pool.lastRewardBlock;\\n        startBlock = pool.startBlock;\\n        claimableInterval = pool.claimableInterval;\\n    }\\n\\n    // View function to see the remaing rewards of the given pool.\\n    function getRemaingRewards(uint256 _pid) external view returns (uint256[] memory remainingRewards) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        remainingRewards = pool.remainingRewards;\\n    }\\n\\n    // View function to see the given pool's info of user.\\n    function getUserInfo(\\n        uint256 _pid,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (uint256 amount, uint256[] memory pending, uint256[] memory rewardDebt, uint256 nextClaimableBlock)\\n    {\\n        UserInfo memory user = userInfo[_pid][_user];\\n        amount = user.amount;\\n        pending = user.pending;\\n        rewardDebt = user.rewardDebt;\\n        nextClaimableBlock = user.nextClaimableBlock;\\n    }\\n\\n    // View function to see pending rewards.\\n    function pendingRewards(\\n        uint256 _pid,\\n        address _user\\n    ) public view returns (uint256[] memory rewards, uint256 nextClaimableBlock) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 farmingTokenSupply = pool.amount;\\n        rewards = user.pending;\\n        if (block.number >= pool.lastRewardBlock && user.pending.length > 0 && farmingTokenSupply != 0) {\\n            for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\\n                uint256 reward = pool.rewardPerBlock[i].mul(block.number.sub(pool.lastRewardBlock));\\n                uint256 accRewardPerShare = pool.accRewardPerShare[i].add(reward.mul(1e12) / farmingTokenSupply);\\n                rewards[i] = user.pending[i].add((user.amount.mul(accRewardPerShare) / 1e12).sub(user.rewardDebt[i]));\\n            }\\n        }\\n        nextClaimableBlock = user.nextClaimableBlock;\\n    }\\n\\n    // View function to see current periods.\\n    function getPeriodsSinceStart(uint256 _pid) public view returns (uint256 periods) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        if (block.number <= pool.startBlock || pool.claimableInterval == 0) return 0;\\n        uint256 blocksSinceStart = block.number.sub(pool.startBlock);\\n        periods = (blocksSinceStart / pool.claimableInterval).add(1);\\n        if (blocksSinceStart % pool.claimableInterval == 0) {\\n            periods = periods - 1;\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 farmingTokenSupply = pool.amount;\\n        if (farmingTokenSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\\n            uint256 reward = pool.rewardPerBlock[i].mul(block.number.sub(pool.lastRewardBlock));\\n            if (pool.remainingRewards[i] >= reward) {\\n                pool.remainingRewards[i] = pool.remainingRewards[i].sub(reward);\\n            } else {\\n                pool.remainingRewards[i] = 0;\\n            }\\n            pool.accRewardPerShare[i] = pool.accRewardPerShare[i].add(reward.mul(1e12) / farmingTokenSupply);\\n        }\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Stake farming tokens to the given pool.\\n    function stake(uint256 _pid, address _farmingToken, uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(pool.farmingToken == _farmingToken, \\\"FARMING_TOKEN_SAFETY_CHECK\\\");\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\\n                uint256 pending = (user.amount.mul(pool.accRewardPerShare[i]) / 1e12).sub(user.rewardDebt[i]);\\n                user.pending[i] = user.pending[i].add(pending);\\n            }\\n        }\\n        if (user.nextClaimableBlock == 0 && user.amount == 0) {\\n            if (block.number <= pool.startBlock) {\\n                user.nextClaimableBlock = pool.startBlock.add(pool.claimableInterval);\\n            } else {\\n                uint256 periods = getPeriodsSinceStart(_pid);\\n                user.nextClaimableBlock = pool.startBlock.add(periods.mul(pool.claimableInterval));\\n            }\\n            user.rewardDebt = new uint256[](pool.rewardTokens.length);\\n            user.pending = new uint256[](pool.rewardTokens.length);\\n        }\\n        IERC20Upgradeable(pool.farmingToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        user.amount = user.amount.add(_amount);\\n        pool.amount = pool.amount.add(_amount);\\n        for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\\n            user.rewardDebt[i] = user.amount.mul(pool.accRewardPerShare[i]) / 1e12;\\n        }\\n        emit Stake(msg.sender, _pid, _amount);\\n    }\\n\\n    // Redeem farming tokens from the given pool.\\n    function redeem(uint256 _pid, address _farmingToken, uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(pool.farmingToken == _farmingToken, \\\"FARMING_TOKEN_SAFETY_CHECK\\\");\\n        require(user.amount >= _amount, \\\"INSUFFICIENT_AMOUNT\\\");\\n        updatePool(_pid);\\n        for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\\n            uint256 pending = (user.amount.mul(pool.accRewardPerShare[i]) / 1e12).sub(user.rewardDebt[i]);\\n            user.pending[i] = user.pending[i].add(pending);\\n            user.rewardDebt[i] = user.amount.sub(_amount).mul(pool.accRewardPerShare[i]) / 1e12;\\n        }\\n        IERC20Upgradeable(pool.farmingToken).safeTransfer(msg.sender, _amount);\\n        user.amount = user.amount.sub(_amount);\\n        pool.amount = pool.amount.sub(_amount);\\n        emit Redeem(msg.sender, _pid, _amount);\\n    }\\n\\n    // Claim rewards when block number larger than user's nextClaimableBlock.\\n    function claim(uint256 _pid) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(block.number > user.nextClaimableBlock, \\\"NOT_CLAIMABLE\\\");\\n        (uint256[] memory rewards, ) = pendingRewards(_pid, msg.sender);\\n        updatePool(_pid);\\n        for (uint256 i = 0; i < pool.accRewardPerShare.length; i++) {\\n            user.pending[i] = 0;\\n            user.rewardDebt[i] = user.amount.mul(pool.accRewardPerShare[i]) / 1e12;\\n            if (rewards[i] > 0) {\\n                IERC20Upgradeable(pool.rewardTokens[i]).safeTransfer(msg.sender, rewards[i]);\\n            }\\n        }\\n        uint256 periods = getPeriodsSinceStart(_pid);\\n        user.nextClaimableBlock = pool.startBlock.add(periods.mul(pool.claimableInterval));\\n        emit Claim(msg.sender, _pid, pool.rewardTokens, rewards);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n        pool.amount = pool.amount.sub(amount);\\n        user.amount = 0;\\n        user.pending = new uint256[](pool.accRewardPerShare.length);\\n        user.rewardDebt = new uint256[](pool.accRewardPerShare.length);\\n        user.nextClaimableBlock = 0;\\n        IERC20Upgradeable(pool.farmingToken).safeTransfer(msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd5dcc40bbb449a108089ff8dabaa648391c83a2780b4d4406c2166a9ed0cfdb1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612e5f806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063a0b1f5dd11610071578063a0b1f5dd14610277578063d18df53c1461028a578063d8780161146102ab578063f2fde38b146102be578063f674fc50146102d157600080fd5b8063715018a61461021957806374ffcc1a146102215780638129fc1c146102415780638da5cb5b1461024957806395e77e531461026457600080fd5b8063432daf3d116100f4578063432daf3d146101ba5780634dd1a1b7146101cd57806351eb05a6146101e05780635312ea8e146101f35780636e9c931c1461020657600080fd5b8063081e3eda146101315780631069f3b51461014857806313df2cb51461016b5780632f380b3514610180578063379607f5146101a7575b600080fd5b6065545b6040519081526020015b60405180910390f35b61015b6101563660046127b1565b6102e4565b60405161013f9493929190612818565b61017e61017936600461292b565b6103f6565b005b61019361018e366004612a0f565b61067e565b60405161013f989796959493929190612a28565b61017e6101b5366004612a0f565b6108a1565b61017e6101c8366004612ac8565b610acf565b61017e6101db366004612b1d565b610c86565b61017e6101ee366004612a0f565b610d27565b61017e610201366004612a0f565b610ee3565b61017e610214366004612b78565b611052565b61017e6113e4565b61023461022f366004612a0f565b6113f8565b60405161013f9190612bad565b61017e6115d4565b6033546040516001600160a01b03909116815260200161013f565b61017e610272366004612bc0565b6116e5565b61017e610285366004612ac8565b61174d565b61029d6102983660046127b1565b611939565b60405161013f929190612be2565b61017e6102b9366004612b78565b611d94565b61017e6102cc366004612c04565b611fcd565b6101356102df366004612a0f565b612043565b60008281526066602090815260408083206001600160a01b038516845282528083208151608081018352815481526001820180548451818702810187019095528085526060958695889586959490938584019383018282801561036657602002820191906000526020600020905b815481526020019060010190808311610352575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156103be57602002820191906000526020600020905b8154815260200190600101908083116103aa575b5050509183525050600391909101546020918201528151604083015191830151606090930151909a9199509197509095509350505050565b6103fe6122a0565b82518451146104465760405162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f5245574152445360881b60448201526064015b60405180910390fd5b60008243116104555782610457565b435b90506000855167ffffffffffffffff81111561047557610475612855565b60405190808252806020026020018201604052801561049e578160200160208202803683370190505b5090506000865167ffffffffffffffff8111156104bd576104bd612855565b6040519080825280602002602001820160405280156104e6578160200160208202803683370190505b5060408051610120810182526001600160a01b038b8116825260208083018c81529383018b90526060830187905260808301859052600060a0840181905260c0840189905260e084018b905261010084018a905260658054600181018255915283517f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7600990920291820180546001600160a01b0319169190941617835593518051959650929491936105c0937f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c8909101929101906126e0565b50604082015180516105dc916002840191602090910190612745565b50606082015180516105f8916003840191602090910190612745565b5060808201518051610614916004840191602090910190612745565b5060a0820151600582015560c0820151600682015560e08201516007820155610100909101516008909101556040516001600160a01b038916907f73cca62ab1b520c9715bf4e6c71e3e518c754e7148f65102f43289a7df0efea690600090a25050505050505050565b600080606080606060008060008060658a8154811061069f5761069f612c1f565b60009182526020918290206040805161012081018252600990930290910180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561072157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610703575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561077957602002820191906000526020600020905b815481526020019060010190808311610765575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156107d157602002820191906000526020600020905b8154815260200190600101908083116107bd575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561082957602002820191906000526020600020905b815481526020019060010190808311610815575b505050505081526020016005820154815260200160068201548152602001600782015481526020016008820154815250509050806000015198508060a0015197508060200151965080604001519550806060015194508060c0015193508060e001519250806101000151915050919395975091939597565b6000606582815481106108b6576108b6612c1f565b60009182526020808320858452606682526040808520338652909252922060038101546009909202909201925043116109215760405162461bcd60e51b815260206004820152600d60248201526c4e4f545f434c41494d41424c4560981b604482015260640161043d565b600061092d8433611939565b50905061093984610d27565b60005b6003840154811015610a4f57600083600201828154811061095f5761095f612c1f565b906000526020600020018190555064e8d4a5100061099f85600301838154811061098b5761098b612c1f565b6000918252602090912001548554906122fa565b6109a99190612c61565b8360010182815481106109be576109be612c1f565b906000526020600020018190555060008282815181106109e0576109e0612c1f565b60200260200101511115610a3d57610a3d33838381518110610a0457610a04612c1f565b6020026020010151866001018481548110610a2157610a21612c1f565b6000918252602090912001546001600160a01b0316919061230f565b80610a4781612c75565b91505061093c565b506000610a5b85612043565b9050610a82610a778560080154836122fa90919063ffffffff16565b600786015490612377565b6003840155604051859033907f29efd1570858633f7fcf640ecc43b3edc6515af5b29e8e92d9dcad5209f5cd0d90610ac09060018901908790612c8e565b60405180910390a35050505050565b610ad76122a0565b600060658381548110610aec57610aec612c1f565b906000526020600020906009020190508060010180549050825114610b455760405162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f414d4f554e545360881b604482015260640161043d565b60005b8251811015610c43576000838281518110610b6557610b65612c1f565b60200260200101511115610c3157610bc43330858481518110610b8a57610b8a612c1f565b6020026020010151856001018581548110610ba757610ba7612c1f565b6000918252602090912001546001600160a01b0316929190612383565b610c0f838281518110610bd957610bd9612c1f565b6020026020010151836004018381548110610bf657610bf6612c1f565b906000526020600020015461237790919063ffffffff16565b826004018281548110610c2457610c24612c1f565b6000918252602090912001555b80610c3b81612c75565b915050610b48565b50827fa145d60156a87e91a4a98486a8d187f4e4b78f756ff02d42b63b4b2f97207d4d8260010184604051610c79929190612c8e565b60405180910390a2505050565b610c8e6122a0565b8015610c9d57610c9d83610d27565b600060658481548110610cb257610cb2612c1f565b906000526020600020906009020190508060020180549050835114610d0b5760405162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f5245574152445360881b604482015260640161043d565b8251610d209060028301906020860190612745565b5050505050565b600060658281548110610d3c57610d3c612c1f565b9060005260206000209060090201905080600601544311610d5b575050565b60058101546000819003610d7457504360069091015550565b60005b6003830154811015610ed7576000610dcd610d9f8560060154436123c190919063ffffffff16565b856002018481548110610db457610db4612c1f565b90600052602060002001546122fa90919063ffffffff16565b905080846004018381548110610de557610de5612c1f565b906000526020600020015410610e4d57610e2781856004018481548110610e0e57610e0e612c1f565b90600052602060002001546123c190919063ffffffff16565b846004018381548110610e3c57610e3c612c1f565b600091825260209091200155610e71565b6000846004018381548110610e6457610e64612c1f565b6000918252602090912001555b610ea383610e848364e8d4a510006122fa565b610e8e9190612c61565b856003018481548110610bf657610bf6612c1f565b846003018381548110610eb857610eb8612c1f565b6000918252602090912001555080610ecf81612c75565b915050610d77565b50504360069091015550565b600060658281548110610ef857610ef8612c1f565b60009182526020808320858452606682526040808520338652909252922080546009929092029092016005810154909350610f3390826123c1565b600584015560008255600383015467ffffffffffffffff811115610f5957610f59612855565b604051908082528060200260200182016040528015610f82578160200160208202803683370190505b508051610f99916002850191602090910190612745565b50600383015467ffffffffffffffff811115610fb757610fb7612855565b604051908082528060200260200182016040528015610fe0578160200160208202803683370190505b508051610ff7916001850191602090910190612745565b50600060038301558254611015906001600160a01b0316338361230f565b604051818152849033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a350505050565b60006065848154811061106757611067612c1f565b600091825260208083208784526066825260408085203386529092529220600990910290910180549092506001600160a01b03908116908516146110ed5760405162461bcd60e51b815260206004820152601a60248201527f4641524d494e475f544f4b454e5f5341464554595f434845434b000000000000604482015260640161043d565b6110f685610d27565b8054156111c45760005b60038301548110156111c257600061117383600101838154811061112657611126612c1f565b906000526020600020015464e8d4a5100061116387600301868154811061114f5761114f612c1f565b6000918252602090912001548754906122fa565b61116d9190612c61565b906123c1565b905061118e81846002018481548110610bf657610bf6612c1f565b8360020183815481106111a3576111a3612c1f565b60009182526020909120015550806111ba81612c75565b915050611100565b505b60038101541580156111d557508054155b156112f8578160070154431161120257600882015460078301546111f891612377565b600382015561123b565b600061120d86612043565b90506112346112298460080154836122fa90919063ffffffff16565b600785015490612377565b6003830155505b600182015467ffffffffffffffff81111561125857611258612855565b604051908082528060200260200182016040528015611281578160200160208202803683370190505b508051611298916001840191602090910190612745565b50600182015467ffffffffffffffff8111156112b6576112b6612855565b6040519080825280602002602001820160405280156112df578160200160208202803683370190505b5080516112f6916002840191602090910190612745565b505b815461130f906001600160a01b0316333086612383565b805461131b9084612377565b8155600582015461132c9084612377565b600583015560005b60038301548110156113af5764e8d4a5100061137284600301838154811061135e5761135e612c1f565b6000918252602090912001548454906122fa565b61137c9190612c61565b82600101828154811061139157611391612c1f565b600091825260209091200155806113a781612c75565b915050611334565b50604051838152859033907f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b690602001610ac0565b6113ec6122a0565b6113f660006123cd565b565b606060006065838154811061140f5761140f612c1f565b60009182526020918290206040805161012081018252600990930290910180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561149157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611473575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156114e957602002820191906000526020600020905b8154815260200190600101908083116114d5575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561154157602002820191906000526020600020905b81548152602001906001019080831161152d575b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561159957602002820191906000526020600020905b815481526020019060010190808311611585575b505050918352505060058201546020820152600682015460408201526007820154606082015260089091015460809182015201519392505050565b600054610100900460ff16158080156115f45750600054600160ff909116105b8061160e5750303b15801561160e575060005460ff166001145b6116715760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161043d565b6000805460ff191660011790558015611694576000805461ff0019166101001790555b61169c61241f565b80156116e2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6116ed6122a0565b60006065838154811061170257611702612c1f565b90600052602060002090600902019050818160080181905550827fa885ff4d8d3bf78eea3ffc74848dbebe77635486e06727000a3c1b5837845e0a83604051610c7991815260200190565b6117556122a0565b60006065838154811061176a5761176a612c1f565b9060005260206000209060090201905080600101805490508251146117c35760405162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f414d4f554e545360881b604482015260640161043d565b60005b8251811015611903578160040181815481106117e4576117e4612c1f565b906000526020600020015483828151811061180157611801612c1f565b602002602001015111156118485760405162461bcd60e51b815260206004820152600e60248201526d1253959053125117d05353d5539560921b604482015260640161043d565b600083828151811061185c5761185c612c1f565b602002602001015111156118f15761189d3384838151811061188057611880612c1f565b6020026020010151846001018481548110610a2157610a21612c1f565b6118cf8382815181106118b2576118b2612c1f565b6020026020010151836004018381548110610e0e57610e0e612c1f565b8260040182815481106118e4576118e4612c1f565b6000918252602090912001555b806118fb81612c75565b9150506117c6565b50827f8a63d6747886a8cc1166e78fdd0df86a7a77fe1ee60ac1d042e6ff56c234fcc58260010184604051610c79929190612c8e565b60606000806065858154811061195157611951612c1f565b60009182526020918290206040805161012081018252600990930290910180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156119d357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119b5575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611a2b57602002820191906000526020600020905b815481526020019060010190808311611a17575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611a8357602002820191906000526020600020905b815481526020019060010190808311611a6f575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015611adb57602002820191906000526020600020905b815481526020019060010190808311611ac7575b5050505050815260200160058201548152602001600682015481526020016007820154815260200160088201548152505090506000606660008781526020019081526020016000206000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015611baa57602002820191906000526020600020905b815481526020019060010190808311611b96575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015611c0257602002820191906000526020600020905b815481526020019060010190808311611bee575b50505050508152602001600382015481525050905060008260a001519050816040015194508260c001514310158015611c4057506000826040015151115b8015611c4b57508015155b15611d835760005b836060015151811015611d81576000611ca8611c7c8660c00151436123c190919063ffffffff16565b86604001518481518110611c9257611c92612c1f565b60200260200101516122fa90919063ffffffff16565b90506000611cf584611cbf8464e8d4a510006122fa565b611cc99190612c61565b87606001518581518110611cdf57611cdf612c1f565b602002602001015161237790919063ffffffff16565b9050611d4e611d3886602001518581518110611d1357611d13612c1f565b602002602001015164e8d4a51000611163858a600001516122fa90919063ffffffff16565b86604001518581518110611cdf57611cdf612c1f565b888481518110611d6057611d60612c1f565b60200260200101818152505050508080611d7990612c75565b915050611c53565b505b816060015193505050509250929050565b600060658481548110611da957611da9612c1f565b600091825260208083208784526066825260408085203386529092529220600990910290910180549092506001600160a01b0390811690851614611e2f5760405162461bcd60e51b815260206004820152601a60248201527f4641524d494e475f544f4b454e5f5341464554595f434845434b000000000000604482015260640161043d565b8054831115611e765760405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d05353d55395606a1b604482015260640161043d565b611e7f85610d27565b60005b6003830154811015611f60576000611ea883600101838154811061112657611126612c1f565b9050611ec381846002018481548110610bf657610bf6612c1f565b836002018381548110611ed857611ed8612c1f565b906000526020600020018190555064e8d4a51000611f22856003018481548110611f0457611f04612c1f565b6000918252602090912001548554611f1c90896123c1565b906122fa565b611f2c9190612c61565b836001018381548110611f4157611f41612c1f565b6000918252602090912001555080611f5881612c75565b915050611e82565b508154611f77906001600160a01b0316338561230f565b8054611f8390846123c1565b81556005820154611f9490846123c1565b6005830155604051838152859033907fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92990602001610ac0565b611fd56122a0565b6001600160a01b03811661203a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161043d565b6116e2816123cd565b6000806065838154811061205957612059612c1f565b60009182526020918290206040805161012081018252600990930290910180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156120db57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120bd575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561213357602002820191906000526020600020905b81548152602001906001019080831161211f575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561218b57602002820191906000526020600020905b815481526020019060010190808311612177575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156121e357602002820191906000526020600020905b8154815260200190600101908083116121cf575b5050505050815260200160058201548152602001600682015481526020016007820154815260200160088201548152505090508060e001514311158061222c5750610100810151155b1561223a5750600092915050565b60006122538260e00151436123c190919063ffffffff16565b905061227160018361010001518361226b9190612c61565b90612377565b9250816101000151816122849190612cf6565b60000361229957612296600184612d0a565b92505b5050919050565b6033546001600160a01b031633146113f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043d565b60006123068284612d1d565b90505b92915050565b6040516001600160a01b03831660248201526044810182905261237290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261244e565b505050565b60006123068284612d34565b6040516001600160a01b03808516602483015283166044820152606481018290526123bb9085906323b872dd60e01b9060840161233b565b50505050565b60006123068284612d0a565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166124465760405162461bcd60e51b815260040161043d90612d47565b6113f6612520565b60006124a3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125509092919063ffffffff16565b80519091501561237257808060200190518101906124c19190612d92565b6123725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161043d565b600054610100900460ff166125475760405162461bcd60e51b815260040161043d90612d47565b6113f6336123cd565b606061255f8484600085612567565b949350505050565b6060824710156125c85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161043d565b600080866001600160a01b031685876040516125e49190612dda565b60006040518083038185875af1925050503d8060008114612621576040519150601f19603f3d011682016040523d82523d6000602084013e612626565b606091505b509150915061263787838387612642565b979650505050505050565b606083156126b15782516000036126aa576001600160a01b0385163b6126aa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161043d565b508161255f565b61255f83838151156126c65781518083602001fd5b8060405162461bcd60e51b815260040161043d9190612df6565b828054828255906000526020600020908101928215612735579160200282015b8281111561273557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612700565b50612741929150612780565b5090565b828054828255906000526020600020908101928215612735579160200282015b82811115612735578251825591602001919060010190612765565b5b808211156127415760008155600101612781565b80356001600160a01b03811681146127ac57600080fd5b919050565b600080604083850312156127c457600080fd5b823591506127d460208401612795565b90509250929050565b600081518084526020808501945080840160005b8381101561280d578151875295820195908201906001016127f1565b509495945050505050565b84815260806020820152600061283160808301866127dd565b828103604084015261284381866127dd565b91505082606083015295945050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561289457612894612855565b604052919050565b600067ffffffffffffffff8211156128b6576128b6612855565b5060051b60200190565b600082601f8301126128d157600080fd5b813560206128e66128e18361289c565b61286b565b82815260059290921b8401810191818101908684111561290557600080fd5b8286015b848110156129205780358352918301918301612909565b509695505050505050565b600080600080600060a0868803121561294357600080fd5b61294c86612795565b945060208087013567ffffffffffffffff8082111561296a57600080fd5b818901915089601f83011261297e57600080fd5b813561298c6128e18261289c565b81815260059190911b8301840190848101908c8311156129ab57600080fd5b938501935b828510156129d0576129c185612795565b825293850193908501906129b0565b9850505060408901359250808311156129e857600080fd5b50506129f6888289016128c0565b9598949750949560608101359550608001359392505050565b600060208284031215612a2157600080fd5b5035919050565b6001600160a01b03898116825260208083018a90526101006040840181905289519084018190526000926101208501928b810192855b81811015612a7c578451841686529482019493820193600101612a5e565b50505050508281036060840152612a9381896127dd565b90508281036080840152612aa781886127dd565b60a0840196909652505060c081019290925260e09091015295945050505050565b60008060408385031215612adb57600080fd5b82359150602083013567ffffffffffffffff811115612af957600080fd5b612b05858286016128c0565b9150509250929050565b80151581146116e257600080fd5b600080600060608486031215612b3257600080fd5b83359250602084013567ffffffffffffffff811115612b5057600080fd5b612b5c868287016128c0565b9250506040840135612b6d81612b0f565b809150509250925092565b600080600060608486031215612b8d57600080fd5b83359250612b9d60208501612795565b9150604084013590509250925092565b60208152600061230660208301846127dd565b60008060408385031215612bd357600080fd5b50508035926020909101359150565b604081526000612bf560408301856127dd565b90508260208301529392505050565b600060208284031215612c1657600080fd5b61230682612795565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082612c7057612c70612c35565b500490565b600060018201612c8757612c87612c4b565b5060010190565b6000604082016040835280855480835260608501915086600052602092508260002060005b82811015612cd85781546001600160a01b031684529284019260019182019101612cb3565b50505083810382850152612cec81866127dd565b9695505050505050565b600082612d0557612d05612c35565b500690565b8181038181111561230957612309612c4b565b808202811582820484141761230957612309612c4b565b8082018082111561230957612309612c4b565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215612da457600080fd5b8151612daf81612b0f565b9392505050565b60005b83811015612dd1578181015183820152602001612db9565b50506000910152565b60008251612dec818460208701612db6565b9190910192915050565b6020815260008251806020840152612e15816040850160208701612db6565b601f01601f1916919091016040019291505056fea2646970667358221220022a6efc46fcb4c0f56ea3c6525c8e984d3f5f75c3b22b71dd395b85efe1a8ac64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Farming.sol:Farming",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/Farming.sol:Farming",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1020,
        "contract": "contracts/Farming.sol:Farming",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Farming.sol:Farming",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Farming.sol:Farming",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1390,
        "contract": "contracts/Farming.sol:Farming",
        "label": "poolInfo",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_struct(PoolInfo)1386_storage)dyn_storage"
      },
      {
        "astId": 1397,
        "contract": "contracts/Farming.sol:Farming",
        "label": "userInfo",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1363_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)1386_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)1386_storage",
        "encoding": "dynamic_array",
        "label": "struct Farming.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserInfo)1363_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Farming.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1363_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1363_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Farming.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)1363_storage)"
      },
      "t_struct(PoolInfo)1386_storage": {
        "encoding": "inplace",
        "label": "struct Farming.PoolInfo",
        "members": [
          {
            "astId": 1365,
            "contract": "contracts/Farming.sol:Farming",
            "label": "farmingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1368,
            "contract": "contracts/Farming.sol:Farming",
            "label": "rewardTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 1371,
            "contract": "contracts/Farming.sol:Farming",
            "label": "rewardPerBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1374,
            "contract": "contracts/Farming.sol:Farming",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1377,
            "contract": "contracts/Farming.sol:Farming",
            "label": "remainingRewards",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1379,
            "contract": "contracts/Farming.sol:Farming",
            "label": "amount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1381,
            "contract": "contracts/Farming.sol:Farming",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1383,
            "contract": "contracts/Farming.sol:Farming",
            "label": "startBlock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1385,
            "contract": "contracts/Farming.sol:Farming",
            "label": "claimableInterval",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(UserInfo)1363_storage": {
        "encoding": "inplace",
        "label": "struct Farming.UserInfo",
        "members": [
          {
            "astId": 1354,
            "contract": "contracts/Farming.sol:Farming",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1357,
            "contract": "contracts/Farming.sol:Farming",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1360,
            "contract": "contracts/Farming.sol:Farming",
            "label": "pending",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1362,
            "contract": "contracts/Farming.sol:Farming",
            "label": "nextClaimableBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}