{
  "address": "0xEEb75eD688343B993cEcFb84525ab5Db059eF5c2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "EthDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "slpCore",
          "type": "address"
        }
      ],
      "name": "SLPCoreSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "withdrawalCredentials",
          "type": "bytes"
        }
      ],
      "name": "WithdrawalCredentialsSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_SIZE_IN_GWEI_LE64",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VALIDATORS_PER_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "pubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "withdrawal_credentials",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "deposit_data_root",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SLPDeposit.Validator[]",
          "name": "validators",
          "type": "tuple[]"
        }
      ],
      "name": "batchDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "pubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "withdrawal_credentials",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "deposit_data_root",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SLPDeposit.Validator",
          "name": "validator",
          "type": "tuple"
        }
      ],
      "name": "checkDepositDataRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositContract",
      "outputs": [
        {
          "internalType": "contract IDepositContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "pubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "withdrawal_credentials",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "deposit_data_root",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SLPDeposit.Validator",
          "name": "validator",
          "type": "tuple"
        },
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes",
          "name": "sharesData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISSVClusters.Cluster",
          "name": "cluster",
          "type": "tuple"
        }
      ],
      "name": "depositSSV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "getValidatorData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "pubkey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "withdrawal_credentials",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "deposit_data_root",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SLPDeposit.Validator",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISSVClusters.Cluster",
          "name": "cluster",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "liquidateSSV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISSVClusters.Cluster",
          "name": "cluster",
          "type": "tuple"
        }
      ],
      "name": "reactivateSSV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "internalType": "bytes",
          "name": "sharesData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISSVClusters.Cluster",
          "name": "cluster",
          "type": "tuple"
        }
      ],
      "name": "registerValidatorSSV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISSVClusters.Cluster",
          "name": "cluster",
          "type": "tuple"
        }
      ],
      "name": "removeValidatorSSV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "setCredential",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_slpCore",
          "type": "address"
        }
      ],
      "name": "setSLPCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ssvNetwork",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ssvToken",
          "type": "address"
        }
      ],
      "name": "setSSVConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawVault",
          "type": "address"
        }
      ],
      "name": "setWithdrawVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slpCore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssvNetwork",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssvToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "operatorIds",
          "type": "uint64[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorCount",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "networkFeeIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "index",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISSVClusters.Cluster",
          "name": "cluster",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawSSV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalCredentials",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4a23ca3b4cfc970f07b0171bd3406a42efd2ca53cfcc4f480d735dec9123ea7",
  "receipt": {
    "to": null,
    "from": "0x976Cf43c894BA43cf096DA8C1427f6a51b724BB9",
    "contractAddress": "0xEEb75eD688343B993cEcFb84525ab5Db059eF5c2",
    "transactionIndex": 59,
    "gasUsed": "2578470",
    "logsBloom": "0x
    "blockHash": "0x88eac17a0174e0675d0f9a2b89f0b259b13b1660d08f1e3d911ff3e2ee2b9655",
    "transactionHash": "0xd4a23ca3b4cfc970f07b0171bd3406a42efd2ca53cfcc4f480d735dec9123ea7",
    "logs": [],
    "blockNumber": 10127537,
    "cumulativeGasUsed": "20968042",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 20,
  "solcInputHash": "b65b8e6152ed697a96861c0204f86966",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"EthDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"slpCore\",\"type\":\"address\"}],\"name\":\"SLPCoreSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawalCredentials\",\"type\":\"bytes\"}],\"name\":\"WithdrawalCredentialsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_SIZE_IN_GWEI_LE64\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VALIDATORS_PER_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"internalType\":\"struct SLPDeposit.Validator[]\",\"name\":\"validators\",\"type\":\"tuple[]\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"internalType\":\"struct SLPDeposit.Validator\",\"name\":\"validator\",\"type\":\"tuple\"}],\"name\":\"checkDepositDataRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositContract\",\"outputs\":[{\"internalType\":\"contract IDepositContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"internalType\":\"struct SLPDeposit.Validator\",\"name\":\"validator\",\"type\":\"tuple\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes\",\"name\":\"sharesData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVClusters.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"depositSSV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getValidatorData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"internalType\":\"struct SLPDeposit.Validator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVClusters.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"liquidateSSV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVClusters.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"reactivateSSV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes\",\"name\":\"sharesData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVClusters.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"registerValidatorSSV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVClusters.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"removeValidatorSSV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setCredential\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slpCore\",\"type\":\"address\"}],\"name\":\"setSLPCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ssvNetwork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ssvToken\",\"type\":\"address\"}],\"name\":\"setSSVConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawVault\",\"type\":\"address\"}],\"name\":\"setWithdrawVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slpCore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssvNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssvToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVClusters.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawSSV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalCredentials\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SLPDeposit.sol\":\"SLPDeposit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/SLPDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// solhint-disable var-name-mixedcase\\n\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IDepositContract {\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n}\\n\\ninterface IETHDepositor {\\n    function depositETH() external payable;\\n}\\n\\ninterface ISSVClusters {\\n    /// @notice Represents a cluster of validators\\n    struct Cluster {\\n        /// @dev The number of validators in the cluster\\n        uint32 validatorCount;\\n        /// @dev The index of network fees related to this cluster\\n        uint64 networkFeeIndex;\\n        /// @dev The last index calculated for the cluster\\n        uint64 index;\\n        /// @dev Flag indicating whether the cluster is active\\n        bool active;\\n        /// @dev The balance of the cluster\\n        uint256 balance;\\n    }\\n\\n    /// @notice Registers a new validator on the SSV Network\\n    /// @param publicKey The public key of the new validator\\n    /// @param operatorIds Array of IDs of operators managing this validator\\n    /// @param sharesData Encrypted shares related to the new validator\\n    /// @param amount Amount of SSV tokens to be deposited\\n    /// @param cluster Cluster to be used with the new validator\\n    function registerValidator(\\n        bytes calldata publicKey,\\n        uint64[] memory operatorIds,\\n        bytes calldata sharesData,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    /// @notice Liquidates a cluster\\n    /// @param owner The owner of the cluster\\n    /// @param operatorIds Array of IDs of operators managing the cluster\\n    /// @param cluster Cluster to be liquidated\\n    function liquidate(address owner, uint64[] memory operatorIds, Cluster memory cluster) external;\\n\\n    /// @notice Removes an existing validator from the SSV Network\\n    /// @param publicKey The public key of the validator to be removed\\n    /// @param operatorIds Array of IDs of operators managing the validator\\n    /// @param cluster Cluster associated with the validator\\n    function removeValidator(bytes calldata publicKey, uint64[] memory operatorIds, Cluster memory cluster) external;\\n\\n    /// @notice Reactivates a cluster\\n    /// @param operatorIds Array of IDs of operators managing the cluster\\n    /// @param amount Amount of SSV tokens to be deposited for reactivation\\n    /// @param cluster Cluster to be reactivated\\n    function reactivate(uint64[] memory operatorIds, uint256 amount, Cluster memory cluster) external;\\n\\n    /// @notice Withdraws tokens from a cluster\\n    /// @param operatorIds Array of IDs of operators managing the cluster\\n    /// @param tokenAmount Amount of SSV tokens to be withdrawn\\n    /// @param cluster Cluster where the withdrawal will be made\\n    function withdraw(uint64[] memory operatorIds, uint256 tokenAmount, Cluster memory cluster) external;\\n}\\n\\ncontract SLPDeposit is OwnableUpgradeable {\\n    struct Validator {\\n        bytes pubkey;\\n        bytes withdrawal_credentials;\\n        bytes signature;\\n        bytes32 deposit_data_root;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event EthDeposited(address indexed sender, uint256 tokenAmount);\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n    // solhint-disable-next-line max-line-length\\n    // Refer to https://github.com/lidofinance/lido-dao/blob/14503a5a9c7c46864704bb3561e22ae2f84a04ff/contracts/0.8.9/BeaconChainDepositor.sol#L27\\n    uint64 public constant DEPOSIT_SIZE_IN_GWEI_LE64 = 0x0040597307000000;\\n    uint256 public constant MAX_VALIDATORS_PER_DEPOSIT = 50;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // address of Ethereum 2.0 Deposit Contract\\n    IDepositContract public depositContract;\\n    // @deprecated batch id => merkle root of withdrawal_credentials\\n    mapping(uint256 => bytes32) public merkleRoots;\\n    // SLP core address\\n    address public slpCore;\\n    // withdrawal_credentials with prefix 0x01\\n    bytes public withdrawalCredentials;\\n    // WithdrawVault address\\n    address public withdrawVault;\\n    // SSVNetwork address\\n    address public ssvNetwork;\\n    // SSVToken address\\n    IERC20Upgradeable public ssvToken;\\n    // operator => isOperator\\n    mapping(address => bool) public operators;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event SLPCoreSet(address indexed sender, address slpCore);\\n    event WithdrawalCredentialsSet(address indexed sender, bytes withdrawalCredentials);\\n\\n    function initialize(address _depositContract) public initializer {\\n        require(_depositContract != address(0), \\\"Invalid deposit contract\\\");\\n        super.__Ownable_init();\\n\\n        depositContract = IDepositContract(_depositContract);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    // Only called by SLP contracts. If you don't know the purpose of this method, please don't call it directly.\\n    function depositETH() external payable {\\n        emit EthDeposited(msg.sender, msg.value);\\n    }\\n\\n    function depositSSV(\\n        Validator calldata validator,\\n        uint64[] memory operatorIds,\\n        bytes calldata sharesData,\\n        uint256 amount,\\n        ISSVClusters.Cluster memory cluster\\n    ) external onlyOwner {\\n        require(withdrawalCredentials[0] == 0x01, \\\"Wrong credential prefix\\\");\\n        require(checkDepositDataRoot(validator), \\\"Invalid deposit data\\\");\\n\\n        innerDeposit(validator);\\n        if (amount > 0) {\\n            ssvToken.transferFrom(msg.sender, address(this), amount);\\n            ssvToken.approve(ssvNetwork, amount);\\n        }\\n        ISSVClusters(ssvNetwork).registerValidator(validator.pubkey, operatorIds, sharesData, amount, cluster);\\n    }\\n\\n    function registerValidatorSSV(\\n        bytes calldata publicKey,\\n        uint64[] memory operatorIds,\\n        bytes calldata sharesData,\\n        uint256 amount,\\n        ISSVClusters.Cluster memory cluster\\n    ) external onlyOperator {\\n        if (amount > 0) {\\n            ssvToken.transferFrom(msg.sender, address(this), amount);\\n            ssvToken.approve(ssvNetwork, amount);\\n        }\\n        ISSVClusters(ssvNetwork).registerValidator(publicKey, operatorIds, sharesData, amount, cluster);\\n    }\\n\\n    function removeValidatorSSV(\\n        bytes calldata publicKey,\\n        uint64[] memory operatorIds,\\n        ISSVClusters.Cluster memory cluster\\n    ) external onlyOperator {\\n        ISSVClusters(ssvNetwork).removeValidator(publicKey, operatorIds, cluster);\\n    }\\n\\n    function liquidateSSV(\\n        uint64[] memory operatorIds,\\n        ISSVClusters.Cluster memory cluster,\\n        address to\\n    ) external onlyOperator {\\n        ISSVClusters(ssvNetwork).liquidate(address(this), operatorIds, cluster);\\n        uint256 amount = ssvToken.balanceOf(address(this));\\n        if (amount > 0) {\\n            ssvToken.transfer(to, amount);\\n        }\\n    }\\n\\n    function reactivateSSV(\\n        uint64[] memory operatorIds,\\n        uint256 amount,\\n        ISSVClusters.Cluster memory cluster\\n    ) external onlyOperator {\\n        if (amount > 0) {\\n            ssvToken.transferFrom(msg.sender, address(this), amount);\\n            ssvToken.approve(ssvNetwork, amount);\\n        }\\n        ISSVClusters(ssvNetwork).reactivate(operatorIds, amount, cluster);\\n    }\\n\\n    function withdrawSSV(\\n        uint64[] memory operatorIds,\\n        ISSVClusters.Cluster memory cluster,\\n        address to,\\n        uint256 tokenAmount\\n    ) external onlyOperator {\\n        ISSVClusters(ssvNetwork).withdraw(operatorIds, tokenAmount, cluster);\\n        ssvToken.transfer(to, tokenAmount);\\n    }\\n\\n    function batchDeposit(Validator[] calldata validators) external onlyOwner {\\n        require(validators.length <= MAX_VALIDATORS_PER_DEPOSIT, \\\"Too many validators\\\");\\n        require(withdrawalCredentials[0] == 0x01, \\\"Wrong credential prefix\\\");\\n        for (uint256 i = 0; i < validators.length; i++) {\\n            require(checkDepositDataRoot(validators[i]), \\\"Invalid deposit data\\\");\\n            innerDeposit(validators[i]);\\n        }\\n    }\\n\\n    function withdrawETH(address recipient, uint256 amount) external onlySLPCoreOrWithdrawVault {\\n        IETHDepositor(recipient).depositETH{value: amount}();\\n    }\\n\\n    function setCredential(address receiver) external onlyOwner {\\n        require(receiver != address(0), \\\"Invalid receiver\\\");\\n        withdrawalCredentials = abi.encodePacked(bytes12(0x010000000000000000000000), receiver);\\n        emit WithdrawalCredentialsSet(msg.sender, withdrawalCredentials);\\n    }\\n\\n    function setSLPCore(address _slpCore) external onlyOwner {\\n        require(_slpCore != address(0), \\\"Invalid SLP core address\\\");\\n        slpCore = _slpCore;\\n        emit SLPCoreSet(msg.sender, slpCore);\\n    }\\n\\n    function setWithdrawVault(address _withdrawVault) external onlyOwner {\\n        require(_withdrawVault != address(0), \\\"Invalid withdraw vault address\\\");\\n        withdrawVault = _withdrawVault;\\n    }\\n\\n    function setSSVConfig(address _ssvNetwork, address _ssvToken) external onlyOwner {\\n        require(_ssvNetwork != address(0), \\\"Invalid SSV network address\\\");\\n        require(_ssvToken != address(0), \\\"Invalid SSV token address\\\");\\n        ssvToken = IERC20Upgradeable(_ssvToken);\\n        ssvNetwork = _ssvNetwork;\\n    }\\n\\n    function addOperator(address _operator) external onlyOwner {\\n        require(_operator != address(0) && !operators[_operator], \\\"Invalid operator\\\");\\n        operators[_operator] = true;\\n    }\\n\\n    function removeOperator(address _operator) external onlyOwner {\\n        require(_operator != address(0) && operators[_operator], \\\"Invalid operator\\\");\\n        operators[_operator] = false;\\n    }\\n\\n    function innerDeposit(Validator memory validator) private {\\n        require(address(this).balance >= DEPOSIT_SIZE, \\\"Insufficient balance\\\");\\n        depositContract.deposit{value: DEPOSIT_SIZE}(\\n            validator.pubkey,\\n            validator.withdrawal_credentials,\\n            validator.signature,\\n            validator.deposit_data_root\\n        );\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function checkDepositDataRoot(Validator calldata validator) public view returns (bool) {\\n        Validator memory _validator = getValidatorData(validator.pubkey, validator.signature);\\n        return _validator.deposit_data_root == validator.deposit_data_root;\\n    }\\n\\n    function getValidatorData(bytes calldata pubkey, bytes calldata signature) public view returns (Validator memory) {\\n        bytes32 pubkey_root = sha256(abi.encodePacked(pubkey, bytes16(0)));\\n        bytes32 signature_root = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(signature[:64])),\\n                sha256(abi.encodePacked(signature[64:], bytes32(0)))\\n            )\\n        );\\n        bytes32 deposit_data_root = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkey_root, withdrawalCredentials)),\\n                sha256(abi.encodePacked(DEPOSIT_SIZE_IN_GWEI_LE64, bytes24(0), signature_root))\\n            )\\n        );\\n\\n        return Validator(pubkey, withdrawalCredentials, signature, deposit_data_root);\\n    }\\n\\n    modifier onlySLPCoreOrWithdrawVault() {\\n        require(msg.sender == slpCore || msg.sender == withdrawVault, \\\"Invalid sender\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender] || msg.sender == owner(), \\\"Invalid operator\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xee81ed966a2818e6ec0fd84b21fe058a23e157db29969ec8cb857257f0e3e683\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612dae806100206000396000f3fe6080604052600436106101e25760003560e01c806371c5ecb111610102578063cd866f9411610095578063ea01363b11610064578063ea01363b146105b9578063f2fde38b146105d9578063f345e584146105f9578063f6326fb31461062c57600080fd5b8063cd866f9414610539578063d0d0ed0514610559578063d18ee3be14610579578063e94ad65b1461059957600080fd5b8063b261e720116100d1578063b261e720146104b9578063b431a501146104d9578063c4d66de8146104f9578063cc0683b71461051957600080fd5b806371c5ecb11461042e5780638da5cb5b1461045b5780639870d7fe14610479578063ac8a584a1461049957600080fd5b8063361f188e1161017a5780634cd79e0a116101495780634cd79e0a146103c2578063620f4e45146103e45780636d910295146103f9578063715018a61461041957600080fd5b8063361f188e1461033757806336bf3325146103575780633851daf3146103825780634782f779146103a257600080fd5b806313e7c9d8116101b657806313e7c9d814610297578063159de728146102d757806328c56d5a146102f75780632e1ff2641461031757600080fd5b806257d877146101e7578063012d24241461021d57806304a488331461023f57806310d048581461025f575b600080fd5b3480156101f357600080fd5b50610207610202366004611f25565b610634565b6040516102149190611fe0565b60405180910390f35b34801561022957600080fd5b5061023d61023836600461206b565b610ac4565b005b34801561024b57600080fd5b5061023d61025a366004612225565b610bae565b34801561026b57600080fd5b50606a5461027f906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b3480156102a357600080fd5b506102c76102b236600461228c565b606c6020526000908152604090205460ff1681565b6040519015158152602001610214565b3480156102e357600080fd5b5061023d6102f236600461228c565b610cd7565b34801561030357600080fd5b50606b5461027f906001600160a01b031681565b34801561032357600080fd5b5061023d6103323660046122ae565b610d8c565b34801561034357600080fd5b5061023d61035236600461230c565b610eec565b34801561036357600080fd5b506103746801bc16d674ec80000081565b604051908152602001610214565b34801561038e57600080fd5b5061023d61039d366004612386565b610f9e565b3480156103ae57600080fd5b5061023d6103bd3660046123fa565b61114a565b3480156103ce57600080fd5b506103d7611202565b6040516102149190612424565b3480156103f057600080fd5b50610374603281565b34801561040557600080fd5b5061023d61041436600461228c565b611290565b34801561042557600080fd5b5061023d611361565b34801561043a57600080fd5b50610374610449366004612437565b60666020526000908152604090205481565b34801561046757600080fd5b506033546001600160a01b031661027f565b34801561048557600080fd5b5061023d61049436600461228c565b611375565b3480156104a557600080fd5b5061023d6104b436600461228c565b6113ee565b3480156104c557600080fd5b5061023d6104d4366004612450565b611463565b3480156104e557600080fd5b5060675461027f906001600160a01b031681565b34801561050557600080fd5b5061023d61051436600461228c565b6115f2565b34801561052557600080fd5b5061023d61053436600461249e565b611775565b34801561054557600080fd5b5061023d61055436600461228c565b61192d565b34801561056557600080fd5b5060695461027f906001600160a01b031681565b34801561058557600080fd5b5061023d610594366004612565565b6119ad565b3480156105a557600080fd5b5060655461027f906001600160a01b031681565b3480156105c557600080fd5b506102c76105d436600461260d565b611c22565b3480156105e557600080fd5b5061023d6105f436600461228c565b611c51565b34801561060557600080fd5b50610614664059730700000081565b6040516001600160401b039091168152602001610214565b61023d611cca565b6106626040518060800160405280606081526020016060815260200160608152602001600080191681525090565b600060028686600060801b60405160200161067f93929190612641565b60408051601f198184030181529082905261069991612668565b602060405180830381855afa1580156106b6573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906106d99190612684565b905060006002806106ed604084888a61269d565b6040516020016106fe9291906126c7565b60408051601f198184030181529082905261071891612668565b602060405180830381855afa158015610735573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906107589190612684565b6002610767876040818b61269d565b60405161077b9291906000906020016126d7565b60408051601f198184030181529082905261079591612668565b602060405180830381855afa1580156107b2573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906107d59190612684565b60408051602081019390935282015260600160408051601f198184030181529082905261080191612668565b602060405180830381855afa15801561081e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906108419190612684565b9050600060028084606860405160200161085c92919061271d565b60408051601f198184030181529082905261087691612668565b602060405180830381855afa158015610893573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906108b69190612684565b60408051634059730760d81b60208201526000602882015290810185905260029060600160408051601f19818403018152908290526108f491612668565b602060405180830381855afa158015610911573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906109349190612684565b60408051602081019390935282015260600160408051601f198184030181529082905261096091612668565b602060405180830381855afa15801561097d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906109a09190612684565b6040805160a06020601f8c018190040282018101909252608081018a81529293509182918b908b9081908501838280828437600092019190915250505090825250606880546020909201916109f4906126e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610a20906126e9565b8015610a6d5780601f10610a4257610100808354040283529160200191610a6d565b820191906000526020600020905b815481529060010190602001808311610a5057829003601f168201915b5050505050815260200187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200191909152925050505b949350505050565b610acc611d01565b6001600160a01b038216610b275760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420535356206e6574776f726b2061646472657373000000000060448201526064015b60405180910390fd5b6001600160a01b038116610b7d5760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642053535620746f6b656e2061646472657373000000000000006044820152606401610b1e565b606b80546001600160a01b039283166001600160a01b031991821617909155606a8054939092169216919091179055565b336000908152606c602052604090205460ff1680610bd657506033546001600160a01b031633145b610bf25760405162461bcd60e51b8152600401610b1e906127a0565b606a54604051631a1b9a0b60e21b81526001600160a01b039091169063686e682c90610c2690879085908890600401612855565b600060405180830381600087803b158015610c4057600080fd5b505af1158015610c54573d6000803e3d6000fd5b5050606b5460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052909116925063a9059cbb91506044015b6020604051808303816000875af1158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd0919061287d565b5050505050565b610cdf611d01565b6001600160a01b038116610d355760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420534c5020636f7265206164647265737300000000000000006044820152606401610b1e565b606780546001600160a01b0319166001600160a01b03831690811790915560405190815233907fa5d340708c2045ce2d4e31ab8dec9915a3d8293f35b5d94f424166483d1cba54906020015b60405180910390a250565b336000908152606c602052604090205460ff1680610db457506033546001600160a01b031633145b610dd05760405162461bcd60e51b8152600401610b1e906127a0565b606a54604051635f8797d960e11b81526001600160a01b039091169063bf0f2fb290610e049030908790879060040161289a565b600060405180830381600087803b158015610e1e57600080fd5b505af1158015610e32573d6000803e3d6000fd5b5050606b546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190612684565b90508015610ee657606b5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401610c8d565b50505050565b336000908152606c602052604090205460ff1680610f1457506033546001600160a01b031633145b610f305760405162461bcd60e51b8152600401610b1e906127a0565b606a546040516312b3fc1960e01b81526001600160a01b03909116906312b3fc1990610f669087908790879087906004016128f6565b600060405180830381600087803b158015610f8057600080fd5b505af1158015610f94573d6000803e3d6000fd5b5050505050505050565b610fa6611d01565b6032811115610fed5760405162461bcd60e51b8152602060048201526013602482015272546f6f206d616e792076616c696461746f727360681b6044820152606401610b1e565b606860008154610ffc906126e9565b811061100a5761100a612935565b8154600116156110295790600052602060002090602091828204019190065b9054901a600160f81b026001600160f81b031916600160f81b146110895760405162461bcd60e51b81526020600482015260176024820152760aee4dedcce40c6e4cac8cadce8d2c2d840e0e4caccd2f604b1b6044820152606401610b1e565b60005b81811015611145576110bb8383838181106110a9576110a9612935565b90506020028101906105d4919061294b565b6110fe5760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206465706f736974206461746160601b6044820152606401610b1e565b61113383838381811061111357611113612935565b9050602002810190611125919061294b565b61112e906129d0565b611d5b565b8061113d81612a85565b91505061108c565b505050565b6067546001600160a01b031633148061116d57506069546001600160a01b031633145b6111aa5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b73232b960911b6044820152606401610b1e565b816001600160a01b031663f6326fb3826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111e557600080fd5b505af11580156111f9573d6000803e3d6000fd5b50505050505050565b6068805461120f906126e9565b80601f016020809104026020016040519081016040528092919081815260200182805461123b906126e9565b80156112885780601f1061125d57610100808354040283529160200191611288565b820191906000526020600020905b81548152906001019060200180831161126b57829003601f168201915b505050505081565b611298611d01565b6001600160a01b0381166112e15760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610b1e565b60408051600160f81b60208201526bffffffffffffffffffffffff19606084901b16602c82015201604051602081830303815290604052606890816113269190612af2565b50336001600160a01b03167fe9e279ef3cf5ce2e10345d8f261f07bff3a6867406e29b321faa977ba78384006068604051610d819190612bb1565b611369611d01565b6113736000611e31565b565b61137d611d01565b6001600160a01b038116158015906113ae57506001600160a01b0381166000908152606c602052604090205460ff16155b6113ca5760405162461bcd60e51b8152600401610b1e906127a0565b6001600160a01b03166000908152606c60205260409020805460ff19166001179055565b6113f6611d01565b6001600160a01b0381161580159061142657506001600160a01b0381166000908152606c602052604090205460ff165b6114425760405162461bcd60e51b8152600401610b1e906127a0565b6001600160a01b03166000908152606c60205260409020805460ff19169055565b336000908152606c602052604090205460ff168061148b57506033546001600160a01b031633145b6114a75760405162461bcd60e51b8152600401610b1e906127a0565b81156115a457606b546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611504573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611528919061287d565b50606b54606a5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af115801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a2919061287d565b505b606a546040516305fec6dd60e41b81526001600160a01b0390911690635fec6dd0906115d890869086908690600401612855565b600060405180830381600087803b1580156111e557600080fd5b600054610100900460ff16158080156116125750600054600160ff909116105b8061162c5750303b15801561162c575060005460ff166001145b61168f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b1e565b6000805460ff1916600117905580156116b2576000805461ff0019166101001790555b6001600160a01b0382166117085760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206465706f73697420636f6e747261637400000000000000006044820152606401610b1e565b611710611e83565b606580546001600160a01b0319166001600160a01b0384161790558015611771576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b336000908152606c602052604090205460ff168061179d57506033546001600160a01b031633145b6117b95760405162461bcd60e51b8152600401610b1e906127a0565b81156118b657606b546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183a919061287d565b50606b54606a5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af1158015611890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b4919061287d565b505b606a546040516301ba3ee760e21b81526001600160a01b03909116906306e8fb9c906118f2908a908a908a908a908a908a908a90600401612c3c565b600060405180830381600087803b15801561190c57600080fd5b505af1158015611920573d6000803e3d6000fd5b5050505050505050505050565b611935611d01565b6001600160a01b03811661198b5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207769746864726177207661756c74206164647265737300006044820152606401610b1e565b606980546001600160a01b0319166001600160a01b0392909216919091179055565b6119b5611d01565b6068600081546119c4906126e9565b81106119d2576119d2612935565b8154600116156119f15790600052602060002090602091828204019190065b9054901a600160f81b026001600160f81b031916600160f81b14611a515760405162461bcd60e51b81526020600482015260176024820152760aee4dedcce40c6e4cac8cadce8d2c2d840e0e4caccd2f604b1b6044820152606401610b1e565b611a5a86611c22565b611a9d5760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206465706f736974206461746160601b6044820152606401610b1e565b611aa961112e876129d0565b8115611ba657606b546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2a919061287d565b50606b54606a5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af1158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba4919061287d565b505b606a546001600160a01b03166306e8fb9c611bc18880612c9c565b88888888886040518863ffffffff1660e01b8152600401611be89796959493929190612c3c565b600060405180830381600087803b158015611c0257600080fd5b505af1158015611c16573d6000803e3d6000fd5b50505050505050505050565b600080611c3f611c328480612c9c565b6102026040870187612c9c565b60609081015193013590921492915050565b611c59611d01565b6001600160a01b038116611cbe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b1e565b611cc781611e31565b50565b60405134815233907f66ff7c8f71ccc7c36152a41920d0d3b46ef3034359f76aa1498ed4478c204b5c9060200160405180910390a2565b6033546001600160a01b031633146113735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b1e565b6801bc16d674ec800000471015611dab5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610b1e565b60655481516020830151604080850151606086015191516304512a2360e31b81526001600160a01b03909516946322895118946801bc16d674ec80000094611dfc9491939092909190600401612ce2565b6000604051808303818588803b158015611e1557600080fd5b505af1158015611e29573d6000803e3d6000fd5b505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611eaa5760405162461bcd60e51b8152600401610b1e90612d2d565b611373600054610100900460ff16611ed45760405162461bcd60e51b8152600401610b1e90612d2d565b61137333611e31565b60008083601f840112611eef57600080fd5b5081356001600160401b03811115611f0657600080fd5b602083019150836020828501011115611f1e57600080fd5b9250929050565b60008060008060408587031215611f3b57600080fd5b84356001600160401b0380821115611f5257600080fd5b611f5e88838901611edd565b90965094506020870135915080821115611f7757600080fd5b50611f8487828801611edd565b95989497509550505050565b60005b83811015611fab578181015183820152602001611f93565b50506000910152565b60008151808452611fcc816020860160208601611f90565b601f01601f19169290920160200192915050565b602081526000825160806020840152611ffc60a0840182611fb4565b90506020840151601f198085840301604086015261201a8383611fb4565b92506040860151915080858403016060860152506120388282611fb4565b915050606084015160808401528091505092915050565b80356001600160a01b038116811461206657600080fd5b919050565b6000806040838503121561207e57600080fd5b6120878361204f565b91506120956020840161204f565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156120dc576120dc61209e565b604052919050565b80356001600160401b038116811461206657600080fd5b600082601f83011261210c57600080fd5b813560206001600160401b038211156121275761212761209e565b8160051b6121368282016120b4565b928352848101820192828101908785111561215057600080fd5b83870192505b8483101561217657612167836120e4565b82529183019190830190612156565b979650505050505050565b8015158114611cc757600080fd5b600060a082840312156121a157600080fd5b60405160a081018181106001600160401b03821117156121c3576121c361209e565b604052905080823563ffffffff811681146121dd57600080fd5b81526121eb602084016120e4565b60208201526121fc604084016120e4565b6040820152606083013561220f81612181565b6060820152608092830135920191909152919050565b600080600080610100858703121561223c57600080fd5b84356001600160401b0381111561225257600080fd5b61225e878288016120fb565b94505061226e866020870161218f565b925061227c60c0860161204f565b9396929550929360e00135925050565b60006020828403121561229e57600080fd5b6122a78261204f565b9392505050565b600080600060e084860312156122c357600080fd5b83356001600160401b038111156122d957600080fd5b6122e5868287016120fb565b9350506122f5856020860161218f565b915061230360c0850161204f565b90509250925092565b60008060008060e0858703121561232257600080fd5b84356001600160401b038082111561233957600080fd5b61234588838901611edd565b9096509450602087013591508082111561235e57600080fd5b5061236b878288016120fb565b92505061237b866040870161218f565b905092959194509250565b6000806020838503121561239957600080fd5b82356001600160401b03808211156123b057600080fd5b818501915085601f8301126123c457600080fd5b8135818111156123d357600080fd5b8660208260051b85010111156123e857600080fd5b60209290920196919550909350505050565b6000806040838503121561240d57600080fd5b6124168361204f565b946020939093013593505050565b6020815260006122a76020830184611fb4565b60006020828403121561244957600080fd5b5035919050565b600080600060e0848603121561246557600080fd5b83356001600160401b0381111561247b57600080fd5b612487868287016120fb565b93505060208401359150612303856040860161218f565b6000806000806000806000610120888a0312156124ba57600080fd5b87356001600160401b03808211156124d157600080fd5b6124dd8b838c01611edd565b909950975060208a01359150808211156124f657600080fd5b6125028b838c016120fb565b965060408a013591508082111561251857600080fd5b506125258a828b01611edd565b9095509350506060880135915061253f8960808a0161218f565b905092959891949750929550565b60006080828403121561255f57600080fd5b50919050565b600080600080600080610120878903121561257f57600080fd5b86356001600160401b038082111561259657600080fd5b6125a28a838b0161254d565b975060208901359150808211156125b857600080fd5b6125c48a838b016120fb565b965060408901359150808211156125da57600080fd5b506125e789828a01611edd565b90955093505060608701359150612601886080890161218f565b90509295509295509295565b60006020828403121561261f57600080fd5b81356001600160401b0381111561263557600080fd5b610abc8482850161254d565b828482376fffffffffffffffffffffffffffffffff19919091169101908152601001919050565b6000825161267a818460208701611f90565b9190910192915050565b60006020828403121561269657600080fd5b5051919050565b600080858511156126ad57600080fd5b838611156126ba57600080fd5b5050820193919092039150565b8183823760009101908152919050565b82848237909101908152602001919050565b600181811c908216806126fd57607f821691505b60208210810361255f57634e487b7160e01b600052602260045260246000fd5b8281526000602060008454612731816126e9565b60018281168015612749576001811461276257612792565b60ff198416888701528215158302880186019450612792565b886000528560002060005b848110156127885781548a820189015290830190870161276d565b5050858389010194505b509298975050505050505050565b60208082526010908201526f24b73b30b634b21037b832b930ba37b960811b604082015260600190565b600081518084526020808501945080840160005b838110156128035781516001600160401b0316875295820195908201906001016127de565b509495945050505050565b63ffffffff815116825260208101516001600160401b0380821660208501528060408401511660408501525050606081015115156060830152608081015160808301525050565b60e08152600061286860e08301866127ca565b9050836020830152610abc604083018461280e565b60006020828403121561288f57600080fd5b81516122a781612181565b6001600160a01b038416815260e0602082018190526000906128be908301856127ca565b9050610abc604083018461280e565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e08152600061290a60e0830186886128cd565b828103602084015261291c81866127ca565b91505061292c604083018461280e565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60008235607e1983360301811261267a57600080fd5b600082601f83011261297257600080fd5b81356001600160401b0381111561298b5761298b61209e565b61299e601f8201601f19166020016120b4565b8181528460208386010111156129b357600080fd5b816020850160208301376000918101602001919091529392505050565b6000608082360312156129e257600080fd5b604051608081016001600160401b038282108183111715612a0557612a0561209e565b816040528435915080821115612a1a57600080fd5b612a2636838701612961565b83526020850135915080821115612a3c57600080fd5b612a4836838701612961565b60208401526040850135915080821115612a6157600080fd5b50612a6e36828601612961565b604083015250606092830135928101929092525090565b600060018201612aa557634e487b7160e01b600052601160045260246000fd5b5060010190565b601f82111561114557600081815260208120601f850160051c81016020861015612ad35750805b601f850160051c820191505b81811015611e2957828155600101612adf565b81516001600160401b03811115612b0b57612b0b61209e565b612b1f81612b1984546126e9565b84612aac565b602080601f831160018114612b545760008415612b3c5750858301515b600019600386901b1c1916600185901b178555611e29565b600085815260208120601f198616915b82811015612b8357888601518255948401946001909101908401612b64565b5085821015612ba15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602080835260008454612bc5816126e9565b80848701526040600180841660008114612be65760018114612c0057612c2e565b60ff1985168984015283151560051b890183019550612c2e565b896000528660002060005b85811015612c265781548b8201860152908301908801612c0b565b8a0184019650505b509398975050505050505050565b6000610120808352612c518184018a8c6128cd565b90508281036020840152612c6581896127ca565b90508281036040840152612c7a8187896128cd565b915050836060830152612c90608083018461280e565b98975050505050505050565b6000808335601e19843603018112612cb357600080fd5b8301803591506001600160401b03821115612ccd57600080fd5b602001915036819003821315611f1e57600080fd5b608081526000612cf56080830187611fb4565b8281036020840152612d078187611fb4565b90508281036040840152612d1b8186611fb4565b91505082606083015295945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212201d0cf66bad9d55491e17c8402d1ad1007bbb8061fea792f861c283346dec5a9464736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101e25760003560e01c806371c5ecb111610102578063cd866f9411610095578063ea01363b11610064578063ea01363b146105b9578063f2fde38b146105d9578063f345e584146105f9578063f6326fb31461062c57600080fd5b8063cd866f9414610539578063d0d0ed0514610559578063d18ee3be14610579578063e94ad65b1461059957600080fd5b8063b261e720116100d1578063b261e720146104b9578063b431a501146104d9578063c4d66de8146104f9578063cc0683b71461051957600080fd5b806371c5ecb11461042e5780638da5cb5b1461045b5780639870d7fe14610479578063ac8a584a1461049957600080fd5b8063361f188e1161017a5780634cd79e0a116101495780634cd79e0a146103c2578063620f4e45146103e45780636d910295146103f9578063715018a61461041957600080fd5b8063361f188e1461033757806336bf3325146103575780633851daf3146103825780634782f779146103a257600080fd5b806313e7c9d8116101b657806313e7c9d814610297578063159de728146102d757806328c56d5a146102f75780632e1ff2641461031757600080fd5b806257d877146101e7578063012d24241461021d57806304a488331461023f57806310d048581461025f575b600080fd5b3480156101f357600080fd5b50610207610202366004611f25565b610634565b6040516102149190611fe0565b60405180910390f35b34801561022957600080fd5b5061023d61023836600461206b565b610ac4565b005b34801561024b57600080fd5b5061023d61025a366004612225565b610bae565b34801561026b57600080fd5b50606a5461027f906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b3480156102a357600080fd5b506102c76102b236600461228c565b606c6020526000908152604090205460ff1681565b6040519015158152602001610214565b3480156102e357600080fd5b5061023d6102f236600461228c565b610cd7565b34801561030357600080fd5b50606b5461027f906001600160a01b031681565b34801561032357600080fd5b5061023d6103323660046122ae565b610d8c565b34801561034357600080fd5b5061023d61035236600461230c565b610eec565b34801561036357600080fd5b506103746801bc16d674ec80000081565b604051908152602001610214565b34801561038e57600080fd5b5061023d61039d366004612386565b610f9e565b3480156103ae57600080fd5b5061023d6103bd3660046123fa565b61114a565b3480156103ce57600080fd5b506103d7611202565b6040516102149190612424565b3480156103f057600080fd5b50610374603281565b34801561040557600080fd5b5061023d61041436600461228c565b611290565b34801561042557600080fd5b5061023d611361565b34801561043a57600080fd5b50610374610449366004612437565b60666020526000908152604090205481565b34801561046757600080fd5b506033546001600160a01b031661027f565b34801561048557600080fd5b5061023d61049436600461228c565b611375565b3480156104a557600080fd5b5061023d6104b436600461228c565b6113ee565b3480156104c557600080fd5b5061023d6104d4366004612450565b611463565b3480156104e557600080fd5b5060675461027f906001600160a01b031681565b34801561050557600080fd5b5061023d61051436600461228c565b6115f2565b34801561052557600080fd5b5061023d61053436600461249e565b611775565b34801561054557600080fd5b5061023d61055436600461228c565b61192d565b34801561056557600080fd5b5060695461027f906001600160a01b031681565b34801561058557600080fd5b5061023d610594366004612565565b6119ad565b3480156105a557600080fd5b5060655461027f906001600160a01b031681565b3480156105c557600080fd5b506102c76105d436600461260d565b611c22565b3480156105e557600080fd5b5061023d6105f436600461228c565b611c51565b34801561060557600080fd5b50610614664059730700000081565b6040516001600160401b039091168152602001610214565b61023d611cca565b6106626040518060800160405280606081526020016060815260200160608152602001600080191681525090565b600060028686600060801b60405160200161067f93929190612641565b60408051601f198184030181529082905261069991612668565b602060405180830381855afa1580156106b6573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906106d99190612684565b905060006002806106ed604084888a61269d565b6040516020016106fe9291906126c7565b60408051601f198184030181529082905261071891612668565b602060405180830381855afa158015610735573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906107589190612684565b6002610767876040818b61269d565b60405161077b9291906000906020016126d7565b60408051601f198184030181529082905261079591612668565b602060405180830381855afa1580156107b2573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906107d59190612684565b60408051602081019390935282015260600160408051601f198184030181529082905261080191612668565b602060405180830381855afa15801561081e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906108419190612684565b9050600060028084606860405160200161085c92919061271d565b60408051601f198184030181529082905261087691612668565b602060405180830381855afa158015610893573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906108b69190612684565b60408051634059730760d81b60208201526000602882015290810185905260029060600160408051601f19818403018152908290526108f491612668565b602060405180830381855afa158015610911573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906109349190612684565b60408051602081019390935282015260600160408051601f198184030181529082905261096091612668565b602060405180830381855afa15801561097d573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906109a09190612684565b6040805160a06020601f8c018190040282018101909252608081018a81529293509182918b908b9081908501838280828437600092019190915250505090825250606880546020909201916109f4906126e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610a20906126e9565b8015610a6d5780601f10610a4257610100808354040283529160200191610a6d565b820191906000526020600020905b815481529060010190602001808311610a5057829003601f168201915b5050505050815260200187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200191909152925050505b949350505050565b610acc611d01565b6001600160a01b038216610b275760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420535356206e6574776f726b2061646472657373000000000060448201526064015b60405180910390fd5b6001600160a01b038116610b7d5760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642053535620746f6b656e2061646472657373000000000000006044820152606401610b1e565b606b80546001600160a01b039283166001600160a01b031991821617909155606a8054939092169216919091179055565b336000908152606c602052604090205460ff1680610bd657506033546001600160a01b031633145b610bf25760405162461bcd60e51b8152600401610b1e906127a0565b606a54604051631a1b9a0b60e21b81526001600160a01b039091169063686e682c90610c2690879085908890600401612855565b600060405180830381600087803b158015610c4057600080fd5b505af1158015610c54573d6000803e3d6000fd5b5050606b5460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052909116925063a9059cbb91506044015b6020604051808303816000875af1158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd0919061287d565b5050505050565b610cdf611d01565b6001600160a01b038116610d355760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420534c5020636f7265206164647265737300000000000000006044820152606401610b1e565b606780546001600160a01b0319166001600160a01b03831690811790915560405190815233907fa5d340708c2045ce2d4e31ab8dec9915a3d8293f35b5d94f424166483d1cba54906020015b60405180910390a250565b336000908152606c602052604090205460ff1680610db457506033546001600160a01b031633145b610dd05760405162461bcd60e51b8152600401610b1e906127a0565b606a54604051635f8797d960e11b81526001600160a01b039091169063bf0f2fb290610e049030908790879060040161289a565b600060405180830381600087803b158015610e1e57600080fd5b505af1158015610e32573d6000803e3d6000fd5b5050606b546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190612684565b90508015610ee657606b5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401610c8d565b50505050565b336000908152606c602052604090205460ff1680610f1457506033546001600160a01b031633145b610f305760405162461bcd60e51b8152600401610b1e906127a0565b606a546040516312b3fc1960e01b81526001600160a01b03909116906312b3fc1990610f669087908790879087906004016128f6565b600060405180830381600087803b158015610f8057600080fd5b505af1158015610f94573d6000803e3d6000fd5b5050505050505050565b610fa6611d01565b6032811115610fed5760405162461bcd60e51b8152602060048201526013602482015272546f6f206d616e792076616c696461746f727360681b6044820152606401610b1e565b606860008154610ffc906126e9565b811061100a5761100a612935565b8154600116156110295790600052602060002090602091828204019190065b9054901a600160f81b026001600160f81b031916600160f81b146110895760405162461bcd60e51b81526020600482015260176024820152760aee4dedcce40c6e4cac8cadce8d2c2d840e0e4caccd2f604b1b6044820152606401610b1e565b60005b81811015611145576110bb8383838181106110a9576110a9612935565b90506020028101906105d4919061294b565b6110fe5760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206465706f736974206461746160601b6044820152606401610b1e565b61113383838381811061111357611113612935565b9050602002810190611125919061294b565b61112e906129d0565b611d5b565b8061113d81612a85565b91505061108c565b505050565b6067546001600160a01b031633148061116d57506069546001600160a01b031633145b6111aa5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b73232b960911b6044820152606401610b1e565b816001600160a01b031663f6326fb3826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111e557600080fd5b505af11580156111f9573d6000803e3d6000fd5b50505050505050565b6068805461120f906126e9565b80601f016020809104026020016040519081016040528092919081815260200182805461123b906126e9565b80156112885780601f1061125d57610100808354040283529160200191611288565b820191906000526020600020905b81548152906001019060200180831161126b57829003601f168201915b505050505081565b611298611d01565b6001600160a01b0381166112e15760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610b1e565b60408051600160f81b60208201526bffffffffffffffffffffffff19606084901b16602c82015201604051602081830303815290604052606890816113269190612af2565b50336001600160a01b03167fe9e279ef3cf5ce2e10345d8f261f07bff3a6867406e29b321faa977ba78384006068604051610d819190612bb1565b611369611d01565b6113736000611e31565b565b61137d611d01565b6001600160a01b038116158015906113ae57506001600160a01b0381166000908152606c602052604090205460ff16155b6113ca5760405162461bcd60e51b8152600401610b1e906127a0565b6001600160a01b03166000908152606c60205260409020805460ff19166001179055565b6113f6611d01565b6001600160a01b0381161580159061142657506001600160a01b0381166000908152606c602052604090205460ff165b6114425760405162461bcd60e51b8152600401610b1e906127a0565b6001600160a01b03166000908152606c60205260409020805460ff19169055565b336000908152606c602052604090205460ff168061148b57506033546001600160a01b031633145b6114a75760405162461bcd60e51b8152600401610b1e906127a0565b81156115a457606b546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611504573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611528919061287d565b50606b54606a5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af115801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a2919061287d565b505b606a546040516305fec6dd60e41b81526001600160a01b0390911690635fec6dd0906115d890869086908690600401612855565b600060405180830381600087803b1580156111e557600080fd5b600054610100900460ff16158080156116125750600054600160ff909116105b8061162c5750303b15801561162c575060005460ff166001145b61168f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b1e565b6000805460ff1916600117905580156116b2576000805461ff0019166101001790555b6001600160a01b0382166117085760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206465706f73697420636f6e747261637400000000000000006044820152606401610b1e565b611710611e83565b606580546001600160a01b0319166001600160a01b0384161790558015611771576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b336000908152606c602052604090205460ff168061179d57506033546001600160a01b031633145b6117b95760405162461bcd60e51b8152600401610b1e906127a0565b81156118b657606b546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183a919061287d565b50606b54606a5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af1158015611890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b4919061287d565b505b606a546040516301ba3ee760e21b81526001600160a01b03909116906306e8fb9c906118f2908a908a908a908a908a908a908a90600401612c3c565b600060405180830381600087803b15801561190c57600080fd5b505af1158015611920573d6000803e3d6000fd5b5050505050505050505050565b611935611d01565b6001600160a01b03811661198b5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207769746864726177207661756c74206164647265737300006044820152606401610b1e565b606980546001600160a01b0319166001600160a01b0392909216919091179055565b6119b5611d01565b6068600081546119c4906126e9565b81106119d2576119d2612935565b8154600116156119f15790600052602060002090602091828204019190065b9054901a600160f81b026001600160f81b031916600160f81b14611a515760405162461bcd60e51b81526020600482015260176024820152760aee4dedcce40c6e4cac8cadce8d2c2d840e0e4caccd2f604b1b6044820152606401610b1e565b611a5a86611c22565b611a9d5760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206465706f736974206461746160601b6044820152606401610b1e565b611aa961112e876129d0565b8115611ba657606b546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015611b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2a919061287d565b50606b54606a5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b3906044016020604051808303816000875af1158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba4919061287d565b505b606a546001600160a01b03166306e8fb9c611bc18880612c9c565b88888888886040518863ffffffff1660e01b8152600401611be89796959493929190612c3c565b600060405180830381600087803b158015611c0257600080fd5b505af1158015611c16573d6000803e3d6000fd5b50505050505050505050565b600080611c3f611c328480612c9c565b6102026040870187612c9c565b60609081015193013590921492915050565b611c59611d01565b6001600160a01b038116611cbe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b1e565b611cc781611e31565b50565b60405134815233907f66ff7c8f71ccc7c36152a41920d0d3b46ef3034359f76aa1498ed4478c204b5c9060200160405180910390a2565b6033546001600160a01b031633146113735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b1e565b6801bc16d674ec800000471015611dab5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610b1e565b60655481516020830151604080850151606086015191516304512a2360e31b81526001600160a01b03909516946322895118946801bc16d674ec80000094611dfc9491939092909190600401612ce2565b6000604051808303818588803b158015611e1557600080fd5b505af1158015611e29573d6000803e3d6000fd5b505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611eaa5760405162461bcd60e51b8152600401610b1e90612d2d565b611373600054610100900460ff16611ed45760405162461bcd60e51b8152600401610b1e90612d2d565b61137333611e31565b60008083601f840112611eef57600080fd5b5081356001600160401b03811115611f0657600080fd5b602083019150836020828501011115611f1e57600080fd5b9250929050565b60008060008060408587031215611f3b57600080fd5b84356001600160401b0380821115611f5257600080fd5b611f5e88838901611edd565b90965094506020870135915080821115611f7757600080fd5b50611f8487828801611edd565b95989497509550505050565b60005b83811015611fab578181015183820152602001611f93565b50506000910152565b60008151808452611fcc816020860160208601611f90565b601f01601f19169290920160200192915050565b602081526000825160806020840152611ffc60a0840182611fb4565b90506020840151601f198085840301604086015261201a8383611fb4565b92506040860151915080858403016060860152506120388282611fb4565b915050606084015160808401528091505092915050565b80356001600160a01b038116811461206657600080fd5b919050565b6000806040838503121561207e57600080fd5b6120878361204f565b91506120956020840161204f565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156120dc576120dc61209e565b604052919050565b80356001600160401b038116811461206657600080fd5b600082601f83011261210c57600080fd5b813560206001600160401b038211156121275761212761209e565b8160051b6121368282016120b4565b928352848101820192828101908785111561215057600080fd5b83870192505b8483101561217657612167836120e4565b82529183019190830190612156565b979650505050505050565b8015158114611cc757600080fd5b600060a082840312156121a157600080fd5b60405160a081018181106001600160401b03821117156121c3576121c361209e565b604052905080823563ffffffff811681146121dd57600080fd5b81526121eb602084016120e4565b60208201526121fc604084016120e4565b6040820152606083013561220f81612181565b6060820152608092830135920191909152919050565b600080600080610100858703121561223c57600080fd5b84356001600160401b0381111561225257600080fd5b61225e878288016120fb565b94505061226e866020870161218f565b925061227c60c0860161204f565b9396929550929360e00135925050565b60006020828403121561229e57600080fd5b6122a78261204f565b9392505050565b600080600060e084860312156122c357600080fd5b83356001600160401b038111156122d957600080fd5b6122e5868287016120fb565b9350506122f5856020860161218f565b915061230360c0850161204f565b90509250925092565b60008060008060e0858703121561232257600080fd5b84356001600160401b038082111561233957600080fd5b61234588838901611edd565b9096509450602087013591508082111561235e57600080fd5b5061236b878288016120fb565b92505061237b866040870161218f565b905092959194509250565b6000806020838503121561239957600080fd5b82356001600160401b03808211156123b057600080fd5b818501915085601f8301126123c457600080fd5b8135818111156123d357600080fd5b8660208260051b85010111156123e857600080fd5b60209290920196919550909350505050565b6000806040838503121561240d57600080fd5b6124168361204f565b946020939093013593505050565b6020815260006122a76020830184611fb4565b60006020828403121561244957600080fd5b5035919050565b600080600060e0848603121561246557600080fd5b83356001600160401b0381111561247b57600080fd5b612487868287016120fb565b93505060208401359150612303856040860161218f565b6000806000806000806000610120888a0312156124ba57600080fd5b87356001600160401b03808211156124d157600080fd5b6124dd8b838c01611edd565b909950975060208a01359150808211156124f657600080fd5b6125028b838c016120fb565b965060408a013591508082111561251857600080fd5b506125258a828b01611edd565b9095509350506060880135915061253f8960808a0161218f565b905092959891949750929550565b60006080828403121561255f57600080fd5b50919050565b600080600080600080610120878903121561257f57600080fd5b86356001600160401b038082111561259657600080fd5b6125a28a838b0161254d565b975060208901359150808211156125b857600080fd5b6125c48a838b016120fb565b965060408901359150808211156125da57600080fd5b506125e789828a01611edd565b90955093505060608701359150612601886080890161218f565b90509295509295509295565b60006020828403121561261f57600080fd5b81356001600160401b0381111561263557600080fd5b610abc8482850161254d565b828482376fffffffffffffffffffffffffffffffff19919091169101908152601001919050565b6000825161267a818460208701611f90565b9190910192915050565b60006020828403121561269657600080fd5b5051919050565b600080858511156126ad57600080fd5b838611156126ba57600080fd5b5050820193919092039150565b8183823760009101908152919050565b82848237909101908152602001919050565b600181811c908216806126fd57607f821691505b60208210810361255f57634e487b7160e01b600052602260045260246000fd5b8281526000602060008454612731816126e9565b60018281168015612749576001811461276257612792565b60ff198416888701528215158302880186019450612792565b886000528560002060005b848110156127885781548a820189015290830190870161276d565b5050858389010194505b509298975050505050505050565b60208082526010908201526f24b73b30b634b21037b832b930ba37b960811b604082015260600190565b600081518084526020808501945080840160005b838110156128035781516001600160401b0316875295820195908201906001016127de565b509495945050505050565b63ffffffff815116825260208101516001600160401b0380821660208501528060408401511660408501525050606081015115156060830152608081015160808301525050565b60e08152600061286860e08301866127ca565b9050836020830152610abc604083018461280e565b60006020828403121561288f57600080fd5b81516122a781612181565b6001600160a01b038416815260e0602082018190526000906128be908301856127ca565b9050610abc604083018461280e565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e08152600061290a60e0830186886128cd565b828103602084015261291c81866127ca565b91505061292c604083018461280e565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60008235607e1983360301811261267a57600080fd5b600082601f83011261297257600080fd5b81356001600160401b0381111561298b5761298b61209e565b61299e601f8201601f19166020016120b4565b8181528460208386010111156129b357600080fd5b816020850160208301376000918101602001919091529392505050565b6000608082360312156129e257600080fd5b604051608081016001600160401b038282108183111715612a0557612a0561209e565b816040528435915080821115612a1a57600080fd5b612a2636838701612961565b83526020850135915080821115612a3c57600080fd5b612a4836838701612961565b60208401526040850135915080821115612a6157600080fd5b50612a6e36828601612961565b604083015250606092830135928101929092525090565b600060018201612aa557634e487b7160e01b600052601160045260246000fd5b5060010190565b601f82111561114557600081815260208120601f850160051c81016020861015612ad35750805b601f850160051c820191505b81811015611e2957828155600101612adf565b81516001600160401b03811115612b0b57612b0b61209e565b612b1f81612b1984546126e9565b84612aac565b602080601f831160018114612b545760008415612b3c5750858301515b600019600386901b1c1916600185901b178555611e29565b600085815260208120601f198616915b82811015612b8357888601518255948401946001909101908401612b64565b5085821015612ba15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602080835260008454612bc5816126e9565b80848701526040600180841660008114612be65760018114612c0057612c2e565b60ff1985168984015283151560051b890183019550612c2e565b896000528660002060005b85811015612c265781548b8201860152908301908801612c0b565b8a0184019650505b509398975050505050505050565b6000610120808352612c518184018a8c6128cd565b90508281036020840152612c6581896127ca565b90508281036040840152612c7a8187896128cd565b915050836060830152612c90608083018461280e565b98975050505050505050565b6000808335601e19843603018112612cb357600080fd5b8301803591506001600160401b03821115612ccd57600080fd5b602001915036819003821315611f1e57600080fd5b608081526000612cf56080830187611fb4565b8281036020840152612d078187611fb4565b90508281036040840152612d1b8186611fb4565b91505082606083015295945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212201d0cf66bad9d55491e17c8402d1ad1007bbb8061fea792f861c283346dec5a9464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 703,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 837,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "depositContract",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IDepositContract)723"
      },
      {
        "astId": 841,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "merkleRoots",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 843,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "slpCore",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 845,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "withdrawalCredentials",
        "offset": 0,
        "slot": "104",
        "type": "t_bytes_storage"
      },
      {
        "astId": 847,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "withdrawVault",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 849,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "ssvNetwork",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 852,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "ssvToken",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IERC20Upgradeable)378"
      },
      {
        "astId": 856,
        "contract": "contracts/SLPDeposit.sol:SLPDeposit",
        "label": "operators",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IDepositContract)723": {
        "encoding": "inplace",
        "label": "contract IDepositContract",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)378": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}