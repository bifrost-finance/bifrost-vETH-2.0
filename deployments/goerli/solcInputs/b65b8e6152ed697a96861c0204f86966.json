{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/SLPDeposit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n// solhint-disable var-name-mixedcase\n\npragma solidity ^0.8.0;\n\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {IERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IDepositContract {\n    /// @notice Submit a Phase 0 DepositData object.\n    /// @param pubkey A BLS12-381 public key.\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\n    /// @param signature A BLS12-381 signature.\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\n    /// Used as a protection against malformed input.\n    function deposit(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external payable;\n}\n\ninterface IETHDepositor {\n    function depositETH() external payable;\n}\n\ninterface ISSVClusters {\n    /// @notice Represents a cluster of validators\n    struct Cluster {\n        /// @dev The number of validators in the cluster\n        uint32 validatorCount;\n        /// @dev The index of network fees related to this cluster\n        uint64 networkFeeIndex;\n        /// @dev The last index calculated for the cluster\n        uint64 index;\n        /// @dev Flag indicating whether the cluster is active\n        bool active;\n        /// @dev The balance of the cluster\n        uint256 balance;\n    }\n\n    /// @notice Registers a new validator on the SSV Network\n    /// @param publicKey The public key of the new validator\n    /// @param operatorIds Array of IDs of operators managing this validator\n    /// @param sharesData Encrypted shares related to the new validator\n    /// @param amount Amount of SSV tokens to be deposited\n    /// @param cluster Cluster to be used with the new validator\n    function registerValidator(\n        bytes calldata publicKey,\n        uint64[] memory operatorIds,\n        bytes calldata sharesData,\n        uint256 amount,\n        Cluster memory cluster\n    ) external;\n\n    /// @notice Liquidates a cluster\n    /// @param owner The owner of the cluster\n    /// @param operatorIds Array of IDs of operators managing the cluster\n    /// @param cluster Cluster to be liquidated\n    function liquidate(address owner, uint64[] memory operatorIds, Cluster memory cluster) external;\n\n    /// @notice Removes an existing validator from the SSV Network\n    /// @param publicKey The public key of the validator to be removed\n    /// @param operatorIds Array of IDs of operators managing the validator\n    /// @param cluster Cluster associated with the validator\n    function removeValidator(bytes calldata publicKey, uint64[] memory operatorIds, Cluster memory cluster) external;\n\n    /// @notice Reactivates a cluster\n    /// @param operatorIds Array of IDs of operators managing the cluster\n    /// @param amount Amount of SSV tokens to be deposited for reactivation\n    /// @param cluster Cluster to be reactivated\n    function reactivate(uint64[] memory operatorIds, uint256 amount, Cluster memory cluster) external;\n\n    /// @notice Withdraws tokens from a cluster\n    /// @param operatorIds Array of IDs of operators managing the cluster\n    /// @param tokenAmount Amount of SSV tokens to be withdrawn\n    /// @param cluster Cluster where the withdrawal will be made\n    function withdraw(uint64[] memory operatorIds, uint256 tokenAmount, Cluster memory cluster) external;\n}\n\ncontract SLPDeposit is OwnableUpgradeable {\n    struct Validator {\n        bytes pubkey;\n        bytes withdrawal_credentials;\n        bytes signature;\n        bytes32 deposit_data_root;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event EthDeposited(address indexed sender, uint256 tokenAmount);\n\n    /* ========== CONSTANTS ========== */\n\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\n    // solhint-disable-next-line max-line-length\n    // Refer to https://github.com/lidofinance/lido-dao/blob/14503a5a9c7c46864704bb3561e22ae2f84a04ff/contracts/0.8.9/BeaconChainDepositor.sol#L27\n    uint64 public constant DEPOSIT_SIZE_IN_GWEI_LE64 = 0x0040597307000000;\n    uint256 public constant MAX_VALIDATORS_PER_DEPOSIT = 50;\n\n    /* ========== STATE VARIABLES ========== */\n\n    // address of Ethereum 2.0 Deposit Contract\n    IDepositContract public depositContract;\n    // @deprecated batch id => merkle root of withdrawal_credentials\n    mapping(uint256 => bytes32) public merkleRoots;\n    // SLP core address\n    address public slpCore;\n    // withdrawal_credentials with prefix 0x01\n    bytes public withdrawalCredentials;\n    // WithdrawVault address\n    address public withdrawVault;\n    // SSVNetwork address\n    address public ssvNetwork;\n    // SSVToken address\n    IERC20Upgradeable public ssvToken;\n    // operator => isOperator\n    mapping(address => bool) public operators;\n\n    /* ========== EVENTS ========== */\n\n    event SLPCoreSet(address indexed sender, address slpCore);\n    event WithdrawalCredentialsSet(address indexed sender, bytes withdrawalCredentials);\n\n    function initialize(address _depositContract) public initializer {\n        require(_depositContract != address(0), \"Invalid deposit contract\");\n        super.__Ownable_init();\n\n        depositContract = IDepositContract(_depositContract);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    // Only called by SLP contracts. If you don't know the purpose of this method, please don't call it directly.\n    function depositETH() external payable {\n        emit EthDeposited(msg.sender, msg.value);\n    }\n\n    function depositSSV(\n        Validator calldata validator,\n        uint64[] memory operatorIds,\n        bytes calldata sharesData,\n        uint256 amount,\n        ISSVClusters.Cluster memory cluster\n    ) external onlyOwner {\n        require(withdrawalCredentials[0] == 0x01, \"Wrong credential prefix\");\n        require(checkDepositDataRoot(validator), \"Invalid deposit data\");\n\n        innerDeposit(validator);\n        if (amount > 0) {\n            ssvToken.transferFrom(msg.sender, address(this), amount);\n            ssvToken.approve(ssvNetwork, amount);\n        }\n        ISSVClusters(ssvNetwork).registerValidator(validator.pubkey, operatorIds, sharesData, amount, cluster);\n    }\n\n    function registerValidatorSSV(\n        bytes calldata publicKey,\n        uint64[] memory operatorIds,\n        bytes calldata sharesData,\n        uint256 amount,\n        ISSVClusters.Cluster memory cluster\n    ) external onlyOperator {\n        if (amount > 0) {\n            ssvToken.transferFrom(msg.sender, address(this), amount);\n            ssvToken.approve(ssvNetwork, amount);\n        }\n        ISSVClusters(ssvNetwork).registerValidator(publicKey, operatorIds, sharesData, amount, cluster);\n    }\n\n    function removeValidatorSSV(\n        bytes calldata publicKey,\n        uint64[] memory operatorIds,\n        ISSVClusters.Cluster memory cluster\n    ) external onlyOperator {\n        ISSVClusters(ssvNetwork).removeValidator(publicKey, operatorIds, cluster);\n    }\n\n    function liquidateSSV(\n        uint64[] memory operatorIds,\n        ISSVClusters.Cluster memory cluster,\n        address to\n    ) external onlyOperator {\n        ISSVClusters(ssvNetwork).liquidate(address(this), operatorIds, cluster);\n        uint256 amount = ssvToken.balanceOf(address(this));\n        if (amount > 0) {\n            ssvToken.transfer(to, amount);\n        }\n    }\n\n    function reactivateSSV(\n        uint64[] memory operatorIds,\n        uint256 amount,\n        ISSVClusters.Cluster memory cluster\n    ) external onlyOperator {\n        if (amount > 0) {\n            ssvToken.transferFrom(msg.sender, address(this), amount);\n            ssvToken.approve(ssvNetwork, amount);\n        }\n        ISSVClusters(ssvNetwork).reactivate(operatorIds, amount, cluster);\n    }\n\n    function withdrawSSV(\n        uint64[] memory operatorIds,\n        ISSVClusters.Cluster memory cluster,\n        address to,\n        uint256 tokenAmount\n    ) external onlyOperator {\n        ISSVClusters(ssvNetwork).withdraw(operatorIds, tokenAmount, cluster);\n        ssvToken.transfer(to, tokenAmount);\n    }\n\n    function batchDeposit(Validator[] calldata validators) external onlyOwner {\n        require(validators.length <= MAX_VALIDATORS_PER_DEPOSIT, \"Too many validators\");\n        require(withdrawalCredentials[0] == 0x01, \"Wrong credential prefix\");\n        for (uint256 i = 0; i < validators.length; i++) {\n            require(checkDepositDataRoot(validators[i]), \"Invalid deposit data\");\n            innerDeposit(validators[i]);\n        }\n    }\n\n    function withdrawETH(address recipient, uint256 amount) external onlySLPCoreOrWithdrawVault {\n        IETHDepositor(recipient).depositETH{value: amount}();\n    }\n\n    function setCredential(address receiver) external onlyOwner {\n        require(receiver != address(0), \"Invalid receiver\");\n        withdrawalCredentials = abi.encodePacked(bytes12(0x010000000000000000000000), receiver);\n        emit WithdrawalCredentialsSet(msg.sender, withdrawalCredentials);\n    }\n\n    function setSLPCore(address _slpCore) external onlyOwner {\n        require(_slpCore != address(0), \"Invalid SLP core address\");\n        slpCore = _slpCore;\n        emit SLPCoreSet(msg.sender, slpCore);\n    }\n\n    function setWithdrawVault(address _withdrawVault) external onlyOwner {\n        require(_withdrawVault != address(0), \"Invalid withdraw vault address\");\n        withdrawVault = _withdrawVault;\n    }\n\n    function setSSVConfig(address _ssvNetwork, address _ssvToken) external onlyOwner {\n        require(_ssvNetwork != address(0), \"Invalid SSV network address\");\n        require(_ssvToken != address(0), \"Invalid SSV token address\");\n        ssvToken = IERC20Upgradeable(_ssvToken);\n        ssvNetwork = _ssvNetwork;\n    }\n\n    function addOperator(address _operator) external onlyOwner {\n        require(_operator != address(0) && !operators[_operator], \"Invalid operator\");\n        operators[_operator] = true;\n    }\n\n    function removeOperator(address _operator) external onlyOwner {\n        require(_operator != address(0) && operators[_operator], \"Invalid operator\");\n        operators[_operator] = false;\n    }\n\n    function innerDeposit(Validator memory validator) private {\n        require(address(this).balance >= DEPOSIT_SIZE, \"Insufficient balance\");\n        depositContract.deposit{value: DEPOSIT_SIZE}(\n            validator.pubkey,\n            validator.withdrawal_credentials,\n            validator.signature,\n            validator.deposit_data_root\n        );\n    }\n\n    /* ========== VIEWS ========== */\n\n    function checkDepositDataRoot(Validator calldata validator) public view returns (bool) {\n        Validator memory _validator = getValidatorData(validator.pubkey, validator.signature);\n        return _validator.deposit_data_root == validator.deposit_data_root;\n    }\n\n    function getValidatorData(bytes calldata pubkey, bytes calldata signature) public view returns (Validator memory) {\n        bytes32 pubkey_root = sha256(abi.encodePacked(pubkey, bytes16(0)));\n        bytes32 signature_root = sha256(\n            abi.encodePacked(\n                sha256(abi.encodePacked(signature[:64])),\n                sha256(abi.encodePacked(signature[64:], bytes32(0)))\n            )\n        );\n        bytes32 deposit_data_root = sha256(\n            abi.encodePacked(\n                sha256(abi.encodePacked(pubkey_root, withdrawalCredentials)),\n                sha256(abi.encodePacked(DEPOSIT_SIZE_IN_GWEI_LE64, bytes24(0), signature_root))\n            )\n        );\n\n        return Validator(pubkey, withdrawalCredentials, signature, deposit_data_root);\n    }\n\n    modifier onlySLPCoreOrWithdrawVault() {\n        require(msg.sender == slpCore || msg.sender == withdrawVault, \"Invalid sender\");\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operators[msg.sender] || msg.sender == owner(), \"Invalid operator\");\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}