{
  "address": "0xE85E24C9E85a8e1DAF575DEEbFE2eccdB2a09122",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardReceived",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_RATE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_DURATION_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTodayTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_rewardReceiver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "perDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPaidAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finishAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardDays",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "setFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7a9a8dcebcf571c20be229ae5ea3514780bf8f6ddf50856f7c32789fc1c421e5",
  "receipt": {
    "to": null,
    "from": "0x976Cf43c894BA43cf096DA8C1427f6a51b724BB9",
    "contractAddress": "0xE85E24C9E85a8e1DAF575DEEbFE2eccdB2a09122",
    "transactionIndex": 15,
    "gasUsed": "806164",
    "logsBloom": "0x
    "blockHash": "0xd212db6a4ab6c3e49c1a9169fcad352543fd63015354f6ad2b1c2852ff7644a9",
    "transactionHash": "0x7a9a8dcebcf571c20be229ae5ea3514780bf8f6ddf50856f7c32789fc1c421e5",
    "logs": [],
    "blockNumber": 147774,
    "cumulativeGasUsed": "1315670",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "142cb5ccb9614e8b4ba2fd5b7b79ef26",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_DURATION_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTodayTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardReceiver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPaidAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MevReward.sol\":\"MevReward\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/MevReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\ncontract MevReward is OwnableUpgradeable {\\n    /* ========== EVENTS ========== */\\n\\n    event RewardReceived(address indexed sender, uint256 amount);\\n    event RewardPaid(address indexed sender, address receiver, uint256 amount);\\n    event FeeWithdrawn(address indexed sender, address receiver, uint256 amount);\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    uint256 public constant FEE_RATE_DENOMINATOR = 1e4;\\n    uint256 public constant REWARD_DURATION = 30;\\n    uint256 public constant REWARD_DURATION_DAYS = REWARD_DURATION * 1 days;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    struct Reward {\\n        uint256 total;\\n        uint256 perDay;\\n        uint256 paid;\\n        uint256 pending;\\n        uint256 lastPaidAt;\\n        uint256 finishAt;\\n    }\\n\\n    struct Fee {\\n        uint256 feeRate;\\n        uint256 totalFee;\\n        uint256 claimedFee;\\n    }\\n\\n    // record fee\\n    Fee public fee;\\n    // record reward\\n    Reward public reward;\\n    // reward receiver address\\n    address public rewardReceiver;\\n    // date timestamp at 00:00:00 => reward paid\\n    mapping(uint256 => bool) public rewardDays;\\n\\n    function initialize(uint256 _feeRate, address _rewardReceiver) public initializer {\\n        require(_rewardReceiver != address(0), \\\"Invalid reward receiver address\\\");\\n        super.__Ownable_init();\\n\\n        reward.lastPaidAt = getTodayTimestamp();\\n        reward.finishAt = reward.lastPaidAt;\\n        rewardReceiver = _rewardReceiver;\\n        _setFeeRate(_feeRate);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function payReward() external onlyOwner {\\n        uint256 paidAt = getTodayTimestamp();\\n        require(!rewardDays[paidAt], \\\"Paid today\\\");\\n        rewardDays[paidAt] = true;\\n\\n        uint256 rewardAmount = reward.pending + (reward.perDay * getDays());\\n        require(reward.paid + rewardAmount <= reward.total, \\\"Pay amount exceeds range\\\");\\n\\n        reward.lastPaidAt = paidAt <= reward.finishAt ? paidAt : reward.finishAt;\\n        reward.paid = reward.paid + rewardAmount;\\n        reward.pending = 0;\\n\\n        AddressUpgradeable.sendValue(payable(rewardReceiver), rewardAmount);\\n\\n        emit RewardPaid(msg.sender, rewardReceiver, rewardAmount);\\n    }\\n\\n    function setFeeRate(uint256 _feeRate) external onlyOwner {\\n        _setFeeRate(_feeRate);\\n    }\\n\\n    function withdrawFee(address receiver, uint256 amount) external onlyOwner {\\n        require(fee.claimedFee + amount <= fee.totalFee, \\\"Withdraw amount exceeds range\\\");\\n        fee.claimedFee = fee.claimedFee + amount;\\n\\n        AddressUpgradeable.sendValue(payable(receiver), amount);\\n\\n        emit FeeWithdrawn(msg.sender, receiver, amount);\\n    }\\n\\n    function _setFeeRate(uint256 _feeRate) private {\\n        require(_feeRate <= FEE_RATE_DENOMINATOR, \\\"Fee rate exceeds range\\\");\\n        fee.feeRate = _feeRate;\\n    }\\n\\n    receive() external payable {\\n        uint256 feeAmount = (msg.value * fee.feeRate) / FEE_RATE_DENOMINATOR;\\n        uint256 rewardAmount = msg.value - feeAmount;\\n        require(rewardAmount >= REWARD_DURATION, \\\"Reward amount is too low\\\");\\n\\n        reward.pending = reward.pending + (reward.perDay * getDays());\\n        reward.lastPaidAt = getTodayTimestamp();\\n        reward.finishAt = reward.lastPaidAt + REWARD_DURATION_DAYS;\\n        reward.total = reward.total + rewardAmount;\\n        reward.perDay = (reward.total - reward.paid - reward.pending) / REWARD_DURATION;\\n\\n        fee.totalFee = fee.totalFee + feeAmount;\\n\\n        emit RewardReceived(msg.sender, msg.value);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function getTodayTimestamp() public view returns (uint256) {\\n        return (block.timestamp / (1 days)) * (1 days);\\n    }\\n\\n    function getDays() private view returns (uint256 times) {\\n        uint256 endAt = block.timestamp <= reward.finishAt ? block.timestamp : reward.finishAt;\\n        times = (endAt - reward.lastPaidAt) / (1 days);\\n    }\\n}\\n\",\"keccak256\":\"0x72e47a7b1b1f2ec3809c04db9a9617cc37c6a0525e47dcf60855154a2033f68f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d9e806100206000396000f3fe6080604052600436106100ec5760003560e01c80635ade228a1161008a578063da35a26f11610059578063da35a26f146103ef578063ddca3f431461040f578063f2fde38b14610449578063fd9be5221461046957600080fd5b80635ade228a14610392578063715018a6146103a75780637842a3a4146103bc5780638da5cb5b146103d157600080fd5b80632a487ef3116100c65780632a487ef314610322578063303e27ca1461034557806345596e2e1461035a5780635a70ad281461037c57600080fd5b8063033452031461024d5780631dac30b014610292578063228cb733146102ca57600080fd5b3661024857606554600090612710906101059034610c0b565b61010f9190610c28565b9050600061011d8234610c4a565b9050601e8110156101755760405162461bcd60e51b815260206004820152601860248201527f52657761726420616d6f756e7420697320746f6f206c6f77000000000000000060448201526064015b60405180910390fd5b61017d610489565b60695461018a9190610c0b565b606b546101979190610c5d565b606b556101a26104c8565b606c556101b3601e62015180610c0b565b606c546101c09190610c5d565b606d556068546101d1908290610c5d565b6068819055606b54606a54601e926101e99190610c4a565b6101f39190610c4a565b6101fd9190610c28565b60695560665461020e908390610c5d565b60665560405134815233907f9ac954606f877c9c9e6deec30e9265abff5a57c7123a34777ca9321eb6c26d8e9060200160405180910390a2005b600080fd5b34801561025957600080fd5b5061027d610268366004610c70565b606f6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561029e57600080fd5b50606e546102b2906001600160a01b031681565b6040516001600160a01b039091168152602001610289565b3480156102d657600080fd5b50606854606954606a54606b54606c54606d546102f595949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610289565b34801561032e57600080fd5b506103376104c8565b604051908152602001610289565b34801561035157600080fd5b506103376104e9565b34801561036657600080fd5b5061037a610375366004610c70565b6104fa565b005b34801561038857600080fd5b5061033761271081565b34801561039e57600080fd5b50610337601e81565b3480156103b357600080fd5b5061037a61050e565b3480156103c857600080fd5b5061037a610522565b3480156103dd57600080fd5b506033546001600160a01b03166102b2565b3480156103fb57600080fd5b5061037a61040a366004610ca5565b6106b1565b34801561041b57600080fd5b5060655460665460675461042e92919083565b60408051938452602084019290925290820152606001610289565b34801561045557600080fd5b5061037a610464366004610cd1565b61084e565b34801561047557600080fd5b5061037a610484366004610cf3565b6108c4565b6000806068600501544211156104a157606d546104a3565b425b606c5490915062015180906104b89083610c4a565b6104c29190610c28565b91505090565b60006104d76201518042610c28565b6104e49062015180610c0b565b905090565b6104f7601e62015180610c0b565b81565b610502610986565b61050b816109e0565b50565b610516610986565b6105206000610a30565b565b61052a610986565b60006105346104c8565b6000818152606f602052604090205490915060ff16156105835760405162461bcd60e51b815260206004820152600a6024820152695061696420746f64617960b01b604482015260640161016c565b6000818152606f60205260408120805460ff191660011790556105a4610489565b6069546105b19190610c0b565b606b546105be9190610c5d565b606854606a54919250906105d3908390610c5d565b11156106215760405162461bcd60e51b815260206004820152601860248201527f50617920616d6f756e7420657863656564732072616e67650000000000000000604482015260640161016c565b606d5482111561063357606d54610635565b815b606c55606a54610646908290610c5d565b606a556000606b55606e54610664906001600160a01b031682610a82565b606e54604080516001600160a01b0390921682526020820183905233917f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e91015b60405180910390a25050565b600054610100900460ff16158080156106d15750600054600160ff909116105b806106eb5750303b1580156106eb575060005460ff166001145b61074e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161016c565b6000805460ff191660011790558015610771576000805461ff0019166101001790555b6001600160a01b0382166107c75760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420726577617264207265636569766572206164647265737300604482015260640161016c565b6107cf610b9b565b6107d76104c8565b606c819055606d55606e80546001600160a01b0319166001600160a01b038416179055610803836109e0565b8015610849576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b610856610986565b6001600160a01b0381166108bb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161016c565b61050b81610a30565b6108cc610986565b6066546067546108dd908390610c5d565b111561092b5760405162461bcd60e51b815260206004820152601d60248201527f576974686472617720616d6f756e7420657863656564732072616e6765000000604482015260640161016c565b606754610939908290610c5d565b6067556109468282610a82565b604080516001600160a01b03841681526020810183905233917eed5939179dc194223f0edd1517ecee2210b22da7f82c8e4b1795e93b9f06aa91016106a5565b6033546001600160a01b031633146105205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161016c565b612710811115610a2b5760405162461bcd60e51b8152602060048201526016602482015275466565207261746520657863656564732072616e676560501b604482015260640161016c565b606555565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80471015610ad25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161016c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610b1f576040519150601f19603f3d011682016040523d82523d6000602084013e610b24565b606091505b50509050806108495760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161016c565b600054610100900460ff16610bc25760405162461bcd60e51b815260040161016c90610d1d565b610520600054610100900460ff16610bec5760405162461bcd60e51b815260040161016c90610d1d565b61052033610a30565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c2257610c22610bf5565b92915050565b600082610c4557634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610c2257610c22610bf5565b80820180821115610c2257610c22610bf5565b600060208284031215610c8257600080fd5b5035919050565b80356001600160a01b0381168114610ca057600080fd5b919050565b60008060408385031215610cb857600080fd5b82359150610cc860208401610c89565b90509250929050565b600060208284031215610ce357600080fd5b610cec82610c89565b9392505050565b60008060408385031215610d0657600080fd5b610d0f83610c89565b946020939093013593505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212204164b7cb21b8a9dcff6a9dd2d19a5c22f4bdbbf7e23c66d218e068a84323245164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80635ade228a1161008a578063da35a26f11610059578063da35a26f146103ef578063ddca3f431461040f578063f2fde38b14610449578063fd9be5221461046957600080fd5b80635ade228a14610392578063715018a6146103a75780637842a3a4146103bc5780638da5cb5b146103d157600080fd5b80632a487ef3116100c65780632a487ef314610322578063303e27ca1461034557806345596e2e1461035a5780635a70ad281461037c57600080fd5b8063033452031461024d5780631dac30b014610292578063228cb733146102ca57600080fd5b3661024857606554600090612710906101059034610c0b565b61010f9190610c28565b9050600061011d8234610c4a565b9050601e8110156101755760405162461bcd60e51b815260206004820152601860248201527f52657761726420616d6f756e7420697320746f6f206c6f77000000000000000060448201526064015b60405180910390fd5b61017d610489565b60695461018a9190610c0b565b606b546101979190610c5d565b606b556101a26104c8565b606c556101b3601e62015180610c0b565b606c546101c09190610c5d565b606d556068546101d1908290610c5d565b6068819055606b54606a54601e926101e99190610c4a565b6101f39190610c4a565b6101fd9190610c28565b60695560665461020e908390610c5d565b60665560405134815233907f9ac954606f877c9c9e6deec30e9265abff5a57c7123a34777ca9321eb6c26d8e9060200160405180910390a2005b600080fd5b34801561025957600080fd5b5061027d610268366004610c70565b606f6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561029e57600080fd5b50606e546102b2906001600160a01b031681565b6040516001600160a01b039091168152602001610289565b3480156102d657600080fd5b50606854606954606a54606b54606c54606d546102f595949392919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610289565b34801561032e57600080fd5b506103376104c8565b604051908152602001610289565b34801561035157600080fd5b506103376104e9565b34801561036657600080fd5b5061037a610375366004610c70565b6104fa565b005b34801561038857600080fd5b5061033761271081565b34801561039e57600080fd5b50610337601e81565b3480156103b357600080fd5b5061037a61050e565b3480156103c857600080fd5b5061037a610522565b3480156103dd57600080fd5b506033546001600160a01b03166102b2565b3480156103fb57600080fd5b5061037a61040a366004610ca5565b6106b1565b34801561041b57600080fd5b5060655460665460675461042e92919083565b60408051938452602084019290925290820152606001610289565b34801561045557600080fd5b5061037a610464366004610cd1565b61084e565b34801561047557600080fd5b5061037a610484366004610cf3565b6108c4565b6000806068600501544211156104a157606d546104a3565b425b606c5490915062015180906104b89083610c4a565b6104c29190610c28565b91505090565b60006104d76201518042610c28565b6104e49062015180610c0b565b905090565b6104f7601e62015180610c0b565b81565b610502610986565b61050b816109e0565b50565b610516610986565b6105206000610a30565b565b61052a610986565b60006105346104c8565b6000818152606f602052604090205490915060ff16156105835760405162461bcd60e51b815260206004820152600a6024820152695061696420746f64617960b01b604482015260640161016c565b6000818152606f60205260408120805460ff191660011790556105a4610489565b6069546105b19190610c0b565b606b546105be9190610c5d565b606854606a54919250906105d3908390610c5d565b11156106215760405162461bcd60e51b815260206004820152601860248201527f50617920616d6f756e7420657863656564732072616e67650000000000000000604482015260640161016c565b606d5482111561063357606d54610635565b815b606c55606a54610646908290610c5d565b606a556000606b55606e54610664906001600160a01b031682610a82565b606e54604080516001600160a01b0390921682526020820183905233917f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e91015b60405180910390a25050565b600054610100900460ff16158080156106d15750600054600160ff909116105b806106eb5750303b1580156106eb575060005460ff166001145b61074e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161016c565b6000805460ff191660011790558015610771576000805461ff0019166101001790555b6001600160a01b0382166107c75760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420726577617264207265636569766572206164647265737300604482015260640161016c565b6107cf610b9b565b6107d76104c8565b606c819055606d55606e80546001600160a01b0319166001600160a01b038416179055610803836109e0565b8015610849576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b610856610986565b6001600160a01b0381166108bb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161016c565b61050b81610a30565b6108cc610986565b6066546067546108dd908390610c5d565b111561092b5760405162461bcd60e51b815260206004820152601d60248201527f576974686472617720616d6f756e7420657863656564732072616e6765000000604482015260640161016c565b606754610939908290610c5d565b6067556109468282610a82565b604080516001600160a01b03841681526020810183905233917eed5939179dc194223f0edd1517ecee2210b22da7f82c8e4b1795e93b9f06aa91016106a5565b6033546001600160a01b031633146105205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161016c565b612710811115610a2b5760405162461bcd60e51b8152602060048201526016602482015275466565207261746520657863656564732072616e676560501b604482015260640161016c565b606555565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80471015610ad25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161016c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610b1f576040519150601f19603f3d011682016040523d82523d6000602084013e610b24565b606091505b50509050806108495760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161016c565b600054610100900460ff16610bc25760405162461bcd60e51b815260040161016c90610d1d565b610520600054610100900460ff16610bec5760405162461bcd60e51b815260040161016c90610d1d565b61052033610a30565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c2257610c22610bf5565b92915050565b600082610c4557634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610c2257610c22610bf5565b80820180821115610c2257610c22610bf5565b600060208284031215610c8257600080fd5b5035919050565b80356001600160a01b0381168114610ca057600080fd5b919050565b60008060408385031215610cb857600080fd5b82359150610cc860208401610c89565b90509250929050565b600060208284031215610ce357600080fd5b610cec82610c89565b9392505050565b60008060408385031215610d0657600080fd5b610d0f83610c89565b946020939093013593505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212204164b7cb21b8a9dcff6a9dd2d19a5c22f4bdbbf7e23c66d218e068a84323245164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/MevReward.sol:MevReward",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/MevReward.sol:MevReward",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1220,
        "contract": "contracts/MevReward.sol:MevReward",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/MevReward.sol:MevReward",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/MevReward.sol:MevReward",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1283,
        "contract": "contracts/MevReward.sol:MevReward",
        "label": "fee",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(Fee)1280_storage"
      },
      {
        "astId": 1286,
        "contract": "contracts/MevReward.sol:MevReward",
        "label": "reward",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(Reward)1273_storage"
      },
      {
        "astId": 1288,
        "contract": "contracts/MevReward.sol:MevReward",
        "label": "rewardReceiver",
        "offset": 0,
        "slot": "110",
        "type": "t_address"
      },
      {
        "astId": 1292,
        "contract": "contracts/MevReward.sol:MevReward",
        "label": "rewardDays",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Fee)1280_storage": {
        "encoding": "inplace",
        "label": "struct MevReward.Fee",
        "members": [
          {
            "astId": 1275,
            "contract": "contracts/MevReward.sol:MevReward",
            "label": "feeRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1277,
            "contract": "contracts/MevReward.sol:MevReward",
            "label": "totalFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1279,
            "contract": "contracts/MevReward.sol:MevReward",
            "label": "claimedFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Reward)1273_storage": {
        "encoding": "inplace",
        "label": "struct MevReward.Reward",
        "members": [
          {
            "astId": 1262,
            "contract": "contracts/MevReward.sol:MevReward",
            "label": "total",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1264,
            "contract": "contracts/MevReward.sol:MevReward",
            "label": "perDay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1266,
            "contract": "contracts/MevReward.sol:MevReward",
            "label": "paid",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1268,
            "contract": "contracts/MevReward.sol:MevReward",
            "label": "pending",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1270,
            "contract": "contracts/MevReward.sol:MevReward",
            "label": "lastPaidAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1272,
            "contract": "contracts/MevReward.sol:MevReward",
            "label": "finishAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}