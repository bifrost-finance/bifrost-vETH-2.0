{
  "address": "0xfC66A310BAe6Fa382Aa48a2e82299CE0dc98D14F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalNodeIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_ETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTodayTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "increaseWithdrawalNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_slpDeposit",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardDays",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_slpCore",
          "type": "address"
        }
      ],
      "name": "setSLPCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slpCore",
      "outputs": [
        {
          "internalType": "contract ISLPCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slpDeposit",
      "outputs": [
        {
          "internalType": "contract ISLPDeposit",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWithdrawalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawWithdrawals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalNodeNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8162562f8a7ee433895d3e849e452e0c95d29aa972651b336c49c4f8b5d1738",
  "receipt": {
    "to": null,
    "from": "0x976Cf43c894BA43cf096DA8C1427f6a51b724BB9",
    "contractAddress": "0xfC66A310BAe6Fa382Aa48a2e82299CE0dc98D14F",
    "transactionIndex": 5,
    "gasUsed": "870724",
    "logsBloom": "0x
    "blockHash": "0x73b223f1ae4f37e7052e77f0d6b37f5a721b43b0361e65529c4de840b7be7bde",
    "transactionHash": "0xe8162562f8a7ee433895d3e849e452e0c95d29aa972651b336c49c4f8b5d1738",
    "logs": [],
    "blockNumber": 293366,
    "cumulativeGasUsed": "975724",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7fd75da55e9b0bff59571cd6804c95d9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"WithdrawalNodeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTodayTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"increaseWithdrawalNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slpDeposit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardDays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slpCore\",\"type\":\"address\"}],\"name\":\"setSLPCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slpCore\",\"outputs\":[{\"internalType\":\"contract ISLPCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slpDeposit\",\"outputs\":[{\"internalType\":\"contract ISLPDeposit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalNodeNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WithdrawalVault.sol\":\"WithdrawalVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/WithdrawalVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ninterface ISLPCore {\\n    function addReward(uint256 amount) external;\\n\\n    function removeReward(uint256 amount) external;\\n\\n    function depositWithdrawal() external payable;\\n}\\n\\ninterface ISLPDeposit {\\n    function depositETH() external payable;\\n}\\n\\ncontract WithdrawalVault is OwnableUpgradeable {\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(address indexed sender, uint256 amount);\\n    event RewardRemoved(address indexed sender, uint256 amount);\\n    event Withdrawn(address indexed sender, uint256 amount);\\n    event WithdrawalNodeIncreased(address indexed sender, uint256 number);\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    uint256 public constant DEPOSIT_ETH = 32 ether;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ISLPCore public slpCore;\\n    ISLPDeposit public slpDeposit;\\n    address public operator;\\n\\n    uint256 public withdrawalNodeNumber;\\n    uint256 public totalWithdrawalAmount;\\n\\n    mapping(uint256 => bool) public rewardDays;\\n\\n    function initialize(address _slpDeposit, address _operator) public initializer {\\n        require(_slpDeposit != address(0), \\\"Invalid SLP deposit address\\\");\\n        require(_operator != address(0), \\\"Invalid operator address\\\");\\n        super.__Ownable_init();\\n\\n        slpDeposit = ISLPDeposit(_slpDeposit);\\n        operator = _operator;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function withdrawWithdrawals(uint256 _amount) external onlyOperator {\\n        require(_amount > 0, \\\"Zero amount\\\");\\n        require(_amount <= address(this).balance, \\\"Not enough balance\\\");\\n        require(totalWithdrawalAmount + _amount <= withdrawalNodeNumber * DEPOSIT_ETH, \\\"Exceed total ETH\\\");\\n        totalWithdrawalAmount = totalWithdrawalAmount + _amount;\\n        slpCore.depositWithdrawal{value: _amount}();\\n\\n        emit Withdrawn(msg.sender, _amount);\\n    }\\n\\n    function increaseWithdrawalNode(uint256 n) external onlyOperator {\\n        require(\\n            (withdrawalNodeNumber + n) * DEPOSIT_ETH <= totalWithdrawalAmount + address(this).balance,\\n            \\\"Exceed total ETH\\\"\\n        );\\n        withdrawalNodeNumber += n;\\n\\n        emit WithdrawalNodeIncreased(msg.sender, n);\\n    }\\n\\n    function addReward(uint256 _rewardAmount) external onlyOperator {\\n        uint256 paidAt = getTodayTimestamp();\\n        require(!rewardDays[paidAt], \\\"Paid today\\\");\\n        rewardDays[paidAt] = true;\\n\\n        require(\\n            _rewardAmount <= (totalWithdrawalAmount + address(this).balance) - (withdrawalNodeNumber * DEPOSIT_ETH),\\n            \\\"Exceed total ETH\\\"\\n        );\\n        require(_rewardAmount <= address(this).balance, \\\"Not enough ETH\\\");\\n        slpCore.addReward(_rewardAmount);\\n        slpDeposit.depositETH{value: _rewardAmount}();\\n\\n        emit RewardAdded(msg.sender, _rewardAmount);\\n    }\\n\\n    function removeReward(uint256 _rewardAmount) external onlyOperator {\\n        uint256 rewardAt = getTodayTimestamp();\\n        require(!rewardDays[rewardAt], \\\"Paid today\\\");\\n        rewardDays[rewardAt] = true;\\n\\n        slpCore.removeReward(_rewardAmount);\\n\\n        emit RewardRemoved(msg.sender, _rewardAmount);\\n    }\\n\\n    function setSLPCore(address _slpCore) external onlyOwner {\\n        require(_slpCore != address(0), \\\"Invalid SLP core address\\\");\\n        slpCore = ISLPCore(_slpCore);\\n    }\\n\\n    function setOperator(address _operator) external onlyOwner {\\n        require(_operator != address(0), \\\"Invalid operator address\\\");\\n        operator = _operator;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function getTodayTimestamp() public view returns (uint256) {\\n        return (block.timestamp / (1 days)) * (1 days);\\n    }\\n\\n    /* ========== MODIFIER ========== */\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"Caller is not operator\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xeb753c0afc6c3bd0233733e3fd919c02bc72ddaa2b4988c66957ace48248dfb3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ec8806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806374de4ec4116100a2578063c553173f11610071578063c553173f1461023d578063dcce58d014610250578063e23e0e0814610260578063f2fde38b14610269578063fe9a3e2b1461027c57600080fd5b806374de4ec4146101f35780638da5cb5b14610206578063b3ab15fb14610217578063b431a5011461022a57600080fd5b80633194528a116100e95780633194528a146101a9578063485cc955146101bc578063570ca735146101cf5780636b96bb87146101e2578063715018a6146101eb57600080fd5b8063033452031461011b578063159de7281461015357806322f808d5146101685780632a487ef314610193575b600080fd5b61013e610129366004610ce8565b606a6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b610166610161366004610d1d565b61028f565b005b60665461017b906001600160a01b031681565b6040516001600160a01b03909116815260200161014a565b61019b610314565b60405190815260200161014a565b6101666101b7366004610ce8565b610335565b6101666101ca366004610d3f565b6104d0565b60675461017b906001600160a01b031681565b61019b60685481565b6101666106ba565b610166610201366004610ce8565b6106ce565b6033546001600160a01b031661017b565b610166610225366004610d1d565b6108fb565b60655461017b906001600160a01b031681565b61016661024b366004610ce8565b610976565b61019b6801bc16d674ec80000081565b61019b60695481565b610166610277366004610d1d565b610aa3565b61016661028a366004610ce8565b610b1c565b610297610bdd565b6001600160a01b0381166102f25760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420534c5020636f72652061646472657373000000000000000060448201526064015b60405180910390fd5b606580546001600160a01b0319166001600160a01b0392909216919091179055565b60006103236201518042610d88565b6103309062015180610daa565b905090565b6067546001600160a01b0316331461035f5760405162461bcd60e51b81526004016102e990610dc7565b6000811161039d5760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b60448201526064016102e9565b478111156103e25760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b60448201526064016102e9565b6801bc16d674ec8000006068546103f99190610daa565b816069546104079190610df7565b11156104255760405162461bcd60e51b81526004016102e990610e0a565b806069546104339190610df7565b60695560655460408051631a6a493960e31b815290516001600160a01b039092169163d35249c8918491600480830192600092919082900301818588803b15801561047d57600080fd5b505af1158015610491573d6000803e3d6000fd5b50506040518481523393507f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5925060200190505b60405180910390a250565b600054610100900460ff16158080156104f05750600054600160ff909116105b8061050a5750303b15801561050a575060005460ff166001145b61056d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102e9565b6000805460ff191660011790558015610590576000805461ff0019166101001790555b6001600160a01b0383166105e65760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420534c50206465706f7369742061646472657373000000000060448201526064016102e9565b6001600160a01b0382166106375760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964206f70657261746f72206164647265737360401b60448201526064016102e9565b61063f610c37565b606680546001600160a01b038086166001600160a01b031992831617909255606780549285169290911691909117905580156106b5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6106c2610bdd565b6106cc6000610c66565b565b6067546001600160a01b031633146106f85760405162461bcd60e51b81526004016102e990610dc7565b6000610702610314565b6000818152606a602052604090205490915060ff16156107515760405162461bcd60e51b815260206004820152600a6024820152695061696420746f64617960b01b60448201526064016102e9565b6000818152606a60205260409020805460ff19166001179055606854610781906801bc16d674ec80000090610daa565b4760695461078f9190610df7565b6107999190610e34565b8211156107b85760405162461bcd60e51b81526004016102e990610e0a565b478211156107f95760405162461bcd60e51b815260206004820152600e60248201526d09cdee840cadcdeeaced0408aa8960931b60448201526064016102e9565b606554604051631d3793b160e21b8152600481018490526001600160a01b03909116906374de4ec490602401600060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b50505050606660009054906101000a90046001600160a01b03166001600160a01b031663f6326fb3836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108a757600080fd5b505af11580156108bb573d6000803e3d6000fd5b50506040518581523393507fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29925060200190505b60405180910390a25050565b610903610bdd565b6001600160a01b0381166109545760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964206f70657261746f72206164647265737360401b60448201526064016102e9565b606780546001600160a01b0319166001600160a01b0392909216919091179055565b6067546001600160a01b031633146109a05760405162461bcd60e51b81526004016102e990610dc7565b60006109aa610314565b6000818152606a602052604090205490915060ff16156109f95760405162461bcd60e51b815260206004820152600a6024820152695061696420746f64617960b01b60448201526064016102e9565b6000818152606a602052604090819020805460ff19166001179055606554905163c553173f60e01b8152600481018490526001600160a01b039091169063c553173f90602401600060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b50506040518481523392507fccdd1b4597f1516187e25b38fbad3e75a428981d2a1d898667abb3cdd95a672f91506020016108ef565b610aab610bdd565b6001600160a01b038116610b105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e9565b610b1981610c66565b50565b6067546001600160a01b03163314610b465760405162461bcd60e51b81526004016102e990610dc7565b47606954610b549190610df7565b6801bc16d674ec80000082606854610b6c9190610df7565b610b769190610daa565b1115610b945760405162461bcd60e51b81526004016102e990610e0a565b8060686000828254610ba69190610df7565b909155505060405181815233907f050608bb8214ae2070d31e9333905ec0a77ab57398ce3cf62e78bc733a26f17f906020016104c5565b6033546001600160a01b031633146106cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e9565b600054610100900460ff16610c5e5760405162461bcd60e51b81526004016102e990610e47565b6106cc610cb8565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610cdf5760405162461bcd60e51b81526004016102e990610e47565b6106cc33610c66565b600060208284031215610cfa57600080fd5b5035919050565b80356001600160a01b0381168114610d1857600080fd5b919050565b600060208284031215610d2f57600080fd5b610d3882610d01565b9392505050565b60008060408385031215610d5257600080fd5b610d5b83610d01565b9150610d6960208401610d01565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600082610da557634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610dc157610dc1610d72565b92915050565b60208082526016908201527521b0b63632b91034b9903737ba1037b832b930ba37b960511b604082015260600190565b80820180821115610dc157610dc1610d72565b60208082526010908201526f08af0c6cacac840e8dee8c2d8408aa8960831b604082015260600190565b81810381811115610dc157610dc1610d72565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220aca4ff1273f67c722e1b21128577b29c79fb1d1c108b0c5b7ccd76932f0b09b564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806374de4ec4116100a2578063c553173f11610071578063c553173f1461023d578063dcce58d014610250578063e23e0e0814610260578063f2fde38b14610269578063fe9a3e2b1461027c57600080fd5b806374de4ec4146101f35780638da5cb5b14610206578063b3ab15fb14610217578063b431a5011461022a57600080fd5b80633194528a116100e95780633194528a146101a9578063485cc955146101bc578063570ca735146101cf5780636b96bb87146101e2578063715018a6146101eb57600080fd5b8063033452031461011b578063159de7281461015357806322f808d5146101685780632a487ef314610193575b600080fd5b61013e610129366004610ce8565b606a6020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b610166610161366004610d1d565b61028f565b005b60665461017b906001600160a01b031681565b6040516001600160a01b03909116815260200161014a565b61019b610314565b60405190815260200161014a565b6101666101b7366004610ce8565b610335565b6101666101ca366004610d3f565b6104d0565b60675461017b906001600160a01b031681565b61019b60685481565b6101666106ba565b610166610201366004610ce8565b6106ce565b6033546001600160a01b031661017b565b610166610225366004610d1d565b6108fb565b60655461017b906001600160a01b031681565b61016661024b366004610ce8565b610976565b61019b6801bc16d674ec80000081565b61019b60695481565b610166610277366004610d1d565b610aa3565b61016661028a366004610ce8565b610b1c565b610297610bdd565b6001600160a01b0381166102f25760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420534c5020636f72652061646472657373000000000000000060448201526064015b60405180910390fd5b606580546001600160a01b0319166001600160a01b0392909216919091179055565b60006103236201518042610d88565b6103309062015180610daa565b905090565b6067546001600160a01b0316331461035f5760405162461bcd60e51b81526004016102e990610dc7565b6000811161039d5760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b60448201526064016102e9565b478111156103e25760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b60448201526064016102e9565b6801bc16d674ec8000006068546103f99190610daa565b816069546104079190610df7565b11156104255760405162461bcd60e51b81526004016102e990610e0a565b806069546104339190610df7565b60695560655460408051631a6a493960e31b815290516001600160a01b039092169163d35249c8918491600480830192600092919082900301818588803b15801561047d57600080fd5b505af1158015610491573d6000803e3d6000fd5b50506040518481523393507f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5925060200190505b60405180910390a250565b600054610100900460ff16158080156104f05750600054600160ff909116105b8061050a5750303b15801561050a575060005460ff166001145b61056d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102e9565b6000805460ff191660011790558015610590576000805461ff0019166101001790555b6001600160a01b0383166105e65760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420534c50206465706f7369742061646472657373000000000060448201526064016102e9565b6001600160a01b0382166106375760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964206f70657261746f72206164647265737360401b60448201526064016102e9565b61063f610c37565b606680546001600160a01b038086166001600160a01b031992831617909255606780549285169290911691909117905580156106b5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6106c2610bdd565b6106cc6000610c66565b565b6067546001600160a01b031633146106f85760405162461bcd60e51b81526004016102e990610dc7565b6000610702610314565b6000818152606a602052604090205490915060ff16156107515760405162461bcd60e51b815260206004820152600a6024820152695061696420746f64617960b01b60448201526064016102e9565b6000818152606a60205260409020805460ff19166001179055606854610781906801bc16d674ec80000090610daa565b4760695461078f9190610df7565b6107999190610e34565b8211156107b85760405162461bcd60e51b81526004016102e990610e0a565b478211156107f95760405162461bcd60e51b815260206004820152600e60248201526d09cdee840cadcdeeaced0408aa8960931b60448201526064016102e9565b606554604051631d3793b160e21b8152600481018490526001600160a01b03909116906374de4ec490602401600060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b50505050606660009054906101000a90046001600160a01b03166001600160a01b031663f6326fb3836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108a757600080fd5b505af11580156108bb573d6000803e3d6000fd5b50506040518581523393507fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29925060200190505b60405180910390a25050565b610903610bdd565b6001600160a01b0381166109545760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964206f70657261746f72206164647265737360401b60448201526064016102e9565b606780546001600160a01b0319166001600160a01b0392909216919091179055565b6067546001600160a01b031633146109a05760405162461bcd60e51b81526004016102e990610dc7565b60006109aa610314565b6000818152606a602052604090205490915060ff16156109f95760405162461bcd60e51b815260206004820152600a6024820152695061696420746f64617960b01b60448201526064016102e9565b6000818152606a602052604090819020805460ff19166001179055606554905163c553173f60e01b8152600481018490526001600160a01b039091169063c553173f90602401600060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b50506040518481523392507fccdd1b4597f1516187e25b38fbad3e75a428981d2a1d898667abb3cdd95a672f91506020016108ef565b610aab610bdd565b6001600160a01b038116610b105760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e9565b610b1981610c66565b50565b6067546001600160a01b03163314610b465760405162461bcd60e51b81526004016102e990610dc7565b47606954610b549190610df7565b6801bc16d674ec80000082606854610b6c9190610df7565b610b769190610daa565b1115610b945760405162461bcd60e51b81526004016102e990610e0a565b8060686000828254610ba69190610df7565b909155505060405181815233907f050608bb8214ae2070d31e9333905ec0a77ab57398ce3cf62e78bc733a26f17f906020016104c5565b6033546001600160a01b031633146106cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e9565b600054610100900460ff16610c5e5760405162461bcd60e51b81526004016102e990610e47565b6106cc610cb8565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610cdf5760405162461bcd60e51b81526004016102e990610e47565b6106cc33610c66565b600060208284031215610cfa57600080fd5b5035919050565b80356001600160a01b0381168114610d1857600080fd5b919050565b600060208284031215610d2f57600080fd5b610d3882610d01565b9392505050565b60008060408385031215610d5257600080fd5b610d5b83610d01565b9150610d6960208401610d01565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600082610da557634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610dc157610dc1610d72565b92915050565b60208082526016908201527521b0b63632b91034b9903737ba1037b832b930ba37b960511b604082015260600190565b80820180821115610dc157610dc1610d72565b60208082526010908201526f08af0c6cacac840e8dee8c2d8408aa8960831b604082015260600190565b81810381811115610dc157610dc1610d72565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220aca4ff1273f67c722e1b21128577b29c79fb1d1c108b0c5b7ccd76932f0b09b564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/WithdrawalVault.sol:WithdrawalVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/WithdrawalVault.sol:WithdrawalVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 625,
        "contract": "contracts/WithdrawalVault.sol:WithdrawalVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/WithdrawalVault.sol:WithdrawalVault",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/WithdrawalVault.sol:WithdrawalVault",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 680,
        "contract": "contracts/WithdrawalVault.sol:WithdrawalVault",
        "label": "slpCore",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(ISLPCore)644"
      },
      {
        "astId": 683,
        "contract": "contracts/WithdrawalVault.sol:WithdrawalVault",
        "label": "slpDeposit",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(ISLPDeposit)648"
      },
      {
        "astId": 685,
        "contract": "contracts/WithdrawalVault.sol:WithdrawalVault",
        "label": "operator",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 687,
        "contract": "contracts/WithdrawalVault.sol:WithdrawalVault",
        "label": "withdrawalNodeNumber",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 689,
        "contract": "contracts/WithdrawalVault.sol:WithdrawalVault",
        "label": "totalWithdrawalAmount",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 693,
        "contract": "contracts/WithdrawalVault.sol:WithdrawalVault",
        "label": "rewardDays",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISLPCore)644": {
        "encoding": "inplace",
        "label": "contract ISLPCore",
        "numberOfBytes": "20"
      },
      "t_contract(ISLPDeposit)648": {
        "encoding": "inplace",
        "label": "contract ISLPDeposit",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}