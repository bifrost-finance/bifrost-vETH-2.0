{
  "address": "0xcC173D6E392c92E48C43dB4Df04A8f78Ae2e3D24",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Renewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vTokenfee",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEAD_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_RATE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateVTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "vTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "canWithdrawalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "completedWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositWithdrawal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vETH1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vETH2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_slpDeposit",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mevVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_withdrawalVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mevVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queuedWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vETH1Amount",
          "type": "uint256"
        }
      ],
      "name": "renew",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "setFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slpDeposit",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vETH1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vETH2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawComplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "queued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x87bed2cf15906bf2ca666098fb980aacc04a506ede70ee840836446fbc6d7131",
  "receipt": {
    "to": null,
    "from": "0x976Cf43c894BA43cf096DA8C1427f6a51b724BB9",
    "contractAddress": "0xcC173D6E392c92E48C43dB4Df04A8f78Ae2e3D24",
    "transactionIndex": 14,
    "gasUsed": "1737853",
    "logsBloom": "0x
    "blockHash": "0xe959fec281a0b3e1185b0e0e85636b31c3b1f3e859de934bf988befe62289714",
    "transactionHash": "0x87bed2cf15906bf2ca666098fb980aacc04a506ede70ee840836446fbc6d7131",
    "logs": [],
    "blockNumber": 346791,
    "cumulativeGasUsed": "2031853",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6a1f33d807bcf8f5cfbe71e36e28f733",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Renewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vTokenfee\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"RewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vTokenAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vTokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateVTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"canWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completedWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vETH1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vETH2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_slpDeposit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mevVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawalVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mevVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vETH1Amount\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slpDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vETH1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vETH2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"queued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SLPCore.sol\":\"SLPCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/SLPCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\ninterface IVETH {\\n    function mint(address account, uint amount) external;\\n\\n    function burn(address account, uint amount) external;\\n}\\n\\ninterface ISLPDeposit {\\n    function depositETH() external payable;\\n\\n    function withdrawETH(address recipient, uint256 amount) external;\\n}\\n\\ncontract SLPCore is OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct Withdrawal {\\n        uint256 queued;\\n        uint256 pending;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Deposited(address indexed sender, uint256 tokenAmount, uint256 vTokenAmount);\\n    event Renewed(address indexed sender, uint256 tokenAmount, uint256 vTokenAmount);\\n\\n    event RewardAdded(address indexed sender, uint256 tokenAmount, uint256 vTokenfee);\\n    event RewardRemoved(address indexed sender, uint256 tokenAmount);\\n\\n    event WithdrawalRequested(address indexed sender, uint256 tokenAmount, uint256 vTokenAmount);\\n    event WithdrawalCompleted(address indexed sender, uint256 tokenAmount);\\n    event WithdrawalDeposited(address indexed sender, uint256 tokenAmount);\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    address public constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n    uint256 public constant FEE_RATE_DENOMINATOR = 1e18;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    address public vETH1;\\n    address public vETH2;\\n    address public slpDeposit;\\n    address public mevVault;\\n    address public withdrawalVault;\\n    address public feeReceiver;\\n    uint256 public tokenPool;\\n    uint256 public feeRate;\\n\\n    uint256 public queuedWithdrawal;\\n    uint256 public completedWithdrawal;\\n    mapping(address => Withdrawal) public withdrawals;\\n\\n    function initialize(\\n        address _vETH1,\\n        address _vETH2,\\n        address _slpDeposit,\\n        address _mevVault,\\n        address _withdrawalVault,\\n        address _feeReceiver,\\n        uint256 _feeRate\\n    ) public initializer {\\n        require(_vETH1 != address(0), \\\"Invalid vETH1\\\");\\n        require(_vETH2 != address(0), \\\"Invalid vETH2\\\");\\n        require(_slpDeposit != address(0), \\\"Invalid SLP deposit address\\\");\\n        require(_mevVault != address(0), \\\"Invalid MEV vault address\\\");\\n        require(_withdrawalVault != address(0), \\\"Invalid withdrawal vault address\\\");\\n        require(IERC20Upgradeable(_vETH2).totalSupply() > 0, \\\"Invalid totalSupply of vETH2\\\");\\n\\n        super.__Ownable_init();\\n        super.__ReentrancyGuard_init();\\n        super.__Pausable_init();\\n\\n        _setFeeRate(_feeRate);\\n        _setFeeReceiver(_feeReceiver);\\n        vETH1 = _vETH1;\\n        vETH2 = _vETH2;\\n        slpDeposit = _slpDeposit;\\n        mevVault = _mevVault;\\n        withdrawalVault = _withdrawalVault;\\n        tokenPool = IERC20Upgradeable(_vETH2).totalSupply();\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function mint() external payable nonReentrant whenNotPaused {\\n        uint256 tokenAmount = msg.value;\\n        require(tokenAmount > 0, \\\"Zero amount\\\");\\n        uint256 vTokenAmount = calculateVTokenAmount(tokenAmount);\\n        require(vTokenAmount > 0, \\\"Zero amount\\\");\\n        tokenPool = tokenPool + tokenAmount;\\n        ISLPDeposit(slpDeposit).depositETH{value: tokenAmount}();\\n        IVETH(vETH2).mint(msg.sender, vTokenAmount);\\n\\n        emit Deposited(msg.sender, tokenAmount, vTokenAmount);\\n    }\\n\\n    function renew(uint256 vETH1Amount) external nonReentrant whenNotPaused {\\n        require(vETH1Amount > 0, \\\"Zero amount\\\");\\n\\n        uint256 tokenAmount = vETH1Amount;\\n        uint256 vTokenAmount = calculateVTokenAmount(tokenAmount);\\n        tokenPool = tokenPool + tokenAmount;\\n        IERC20Upgradeable(vETH1).safeTransferFrom(msg.sender, DEAD_ADDRESS, tokenAmount);\\n        IVETH(vETH2).mint(msg.sender, vTokenAmount);\\n\\n        emit Renewed(msg.sender, tokenAmount, vTokenAmount);\\n    }\\n\\n    function withdrawRequest(uint256 vTokenAmount) external nonReentrant whenNotPaused {\\n        require(vTokenAmount > 0, \\\"Zero amount\\\");\\n        Withdrawal storage withdrawal = withdrawals[msg.sender];\\n        uint256 tokenAmount = calculateTokenAmount(vTokenAmount);\\n        require(tokenAmount > 0, \\\"Zero amount\\\");\\n        withdrawal.queued = queuedWithdrawal - withdrawal.pending;\\n        withdrawal.pending = withdrawal.pending + tokenAmount;\\n        queuedWithdrawal = queuedWithdrawal + tokenAmount;\\n        tokenPool = tokenPool - tokenAmount;\\n        IVETH(vETH2).burn(msg.sender, vTokenAmount);\\n\\n        emit WithdrawalRequested(msg.sender, tokenAmount, vTokenAmount);\\n    }\\n\\n    function withdrawComplete(uint256 tokenAmount) external nonReentrant whenNotPaused {\\n        Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        if (tokenAmount == 0) {\\n            // withdraw total pending amount\\n            tokenAmount = withdrawal.pending;\\n        }\\n\\n        require(tokenAmount <= withdrawal.pending, \\\"Exceed permitted amount\\\");\\n        require(tokenAmount <= canWithdrawalAmount(msg.sender), \\\"Insufficient withdrawal amount\\\");\\n\\n        withdrawal.pending = withdrawal.pending - tokenAmount;\\n        withdrawal.queued = withdrawal.queued + tokenAmount;\\n        completedWithdrawal = completedWithdrawal + tokenAmount;\\n        _sendValue(payable(msg.sender), tokenAmount);\\n\\n        emit WithdrawalCompleted(msg.sender, tokenAmount);\\n    }\\n\\n    function addReward(uint256 amount) external onlyVault {\\n        uint256 tokenFee = (amount * feeRate) / FEE_RATE_DENOMINATOR;\\n        uint256 vTokenFee = calculateVTokenAmount(tokenFee);\\n        tokenPool = tokenPool + amount;\\n        // Fee: mint vETH as reward fee to Treasury\\n        IVETH(vETH2).mint(feeReceiver, vTokenFee);\\n\\n        emit RewardAdded(msg.sender, amount, vTokenFee);\\n    }\\n\\n    function removeReward(uint256 amount) external onlyVault {\\n        tokenPool = tokenPool - amount;\\n\\n        emit RewardRemoved(msg.sender, amount);\\n    }\\n\\n    function depositWithdrawal() external payable {\\n        require(msg.sender == withdrawalVault, \\\"Invalid withdrawal vault address\\\");\\n\\n        emit WithdrawalDeposited(msg.sender, msg.value);\\n    }\\n\\n    function setFeeRate(uint256 _feeRate) external onlyOwner {\\n        _setFeeRate(_feeRate);\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external onlyOwner {\\n        _setFeeReceiver(_feeReceiver);\\n    }\\n\\n    function pause() external onlyOwner {\\n        super._pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        super._unpause();\\n    }\\n\\n    function _setFeeRate(uint256 _feeRate) private {\\n        require(_feeRate <= FEE_RATE_DENOMINATOR, \\\"Fee rate exceeds range\\\");\\n        feeRate = _feeRate;\\n    }\\n\\n    function _setFeeReceiver(address _feeReceiver) private {\\n        require(_feeReceiver != address(0), \\\"Invalid fee receiver address\\\");\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    function _sendValue(address payable recipient, uint256 amount) private {\\n        require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Unable to send value\\\");\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function calculateVTokenAmount(uint256 tokenAmount) public view returns (uint256 vTokenAmount) {\\n        uint256 vTokenTotalSupply = IERC20Upgradeable(vETH2).totalSupply();\\n        vTokenAmount = (tokenAmount * vTokenTotalSupply) / tokenPool;\\n    }\\n\\n    function calculateTokenAmount(uint256 vTokenAmount) public view returns (uint256 tokenAmount) {\\n        uint256 vTokenTotalSupply = IERC20Upgradeable(vETH2).totalSupply();\\n        tokenAmount = (vTokenAmount * tokenPool) / vTokenTotalSupply;\\n    }\\n\\n    function getTotalETH() public view returns (uint256) {\\n        return address(this).balance + completedWithdrawal;\\n    }\\n\\n    function canWithdrawalAmount(address target) public view returns (uint256) {\\n        Withdrawal memory withdrawal = withdrawals[target];\\n\\n        if (getTotalETH() <= withdrawal.queued) {\\n            return 0;\\n        }\\n\\n        uint256 availableAmount = getTotalETH() - withdrawal.queued;\\n        availableAmount = address(this).balance < availableAmount ? address(this).balance : availableAmount;\\n\\n        return withdrawal.pending < availableAmount ? withdrawal.pending : availableAmount;\\n    }\\n\\n    /* ========== MODIFIER ========== */\\n\\n    modifier onlyVault() {\\n        require(msg.sender == mevVault || msg.sender == withdrawalVault, \\\"Caller is not vault contract\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x8982fbe956d4ea14fb50525ca07230304bddd88c7267f7125caeb194a8171fb3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e78806100206000396000f3fe6080604052600436106101ee5760003560e01c8063715018a61161010d578063a24bcf46116100a0578063c553173f1161006f578063c553173f14610550578063d35249c814610570578063efdcd97414610578578063f2fde38b14610598578063f922c0d0146105b857600080fd5b8063a24bcf46146104d0578063abc9653e146104f0578063b179b46514610510578063b3f006741461053057600080fd5b80638456cb59116100dc5780638456cb59146104715780638da5cb5b14610486578063978bbdb9146104a4578063996e5c06146104ba57600080fd5b8063715018a6146103d357806374899a7e146103e857806374de4ec4146104085780637a9262a21461042857600080fd5b80634e6fd6c4116101855780635c975abb116101545780635c975abb146103655780635f4c71f11461038857806363ea1b921461039d57806369d42148146103b357600080fd5b80634e6fd6c4146102f357806352a630b9146103095780635a70ad28146103295780635baa75091461034557600080fd5b80631ec01fcd116101c15780631ec01fcd1461027e57806322f808d51461029e5780633f4ba83a146102be57806345596e2e146102d357600080fd5b8063104e9929146101f35780631249c58b1461021c5780631460e39014610226578063193a225c14610246575b600080fd5b3480156101ff57600080fd5b5061020960cf5481565b6040519081526020015b60405180910390f35b6102246105d8565b005b34801561023257600080fd5b50610224610241366004611bf6565b61075b565b34801561025257600080fd5b5060ca54610266906001600160a01b031681565b6040516001600160a01b039091168152602001610213565b34801561028a57600080fd5b5060c954610266906001600160a01b031681565b3480156102aa57600080fd5b5060cb54610266906001600160a01b031681565b3480156102ca57600080fd5b50610224610b8f565b3480156102df57600080fd5b506102246102ee366004611c75565b610b9f565b3480156102ff57600080fd5b5061026661dead81565b34801561031557600080fd5b50610209610324366004611c8e565b610bb3565b34801561033557600080fd5b50610209670de0b6b3a764000081565b34801561035157600080fd5b50610224610360366004611c75565b610c48565b34801561037157600080fd5b5060975460ff166040519015158152602001610213565b34801561039457600080fd5b50610209610d5d565b3480156103a957600080fd5b5061020960d25481565b3480156103bf57600080fd5b5060cd54610266906001600160a01b031681565b3480156103df57600080fd5b50610224610d72565b3480156103f457600080fd5b50610224610403366004611c75565b610d84565b34801561041457600080fd5b50610224610423366004611c75565b610ed6565b34801561043457600080fd5b5061045c610443366004611c8e565b60d3602052600090815260409020805460019091015482565b60408051928352602083019190915201610213565b34801561047d57600080fd5b50610224611030565b34801561049257600080fd5b506033546001600160a01b0316610266565b3480156104b057600080fd5b5061020960d05481565b3480156104c657600080fd5b5061020960d15481565b3480156104dc57600080fd5b506102096104eb366004611c75565b611040565b3480156104fc57600080fd5b5061022461050b366004611c75565b6110dc565b34801561051c57600080fd5b5061020961052b366004611c75565b611236565b34801561053c57600080fd5b5060ce54610266906001600160a01b031681565b34801561055c57600080fd5b5061022461056b366004611c75565b6112c0565b610224611378565b34801561058457600080fd5b50610224610593366004611c8e565b611409565b3480156105a457600080fd5b506102246105b3366004611c8e565b61141a565b3480156105c457600080fd5b5060cc54610266906001600160a01b031681565b6105e0611490565b6105e86114e9565b348061060f5760405162461bcd60e51b815260040161060690611ca9565b60405180910390fd5b600061061a82611236565b90506000811161063c5760405162461bcd60e51b815260040161060690611ca9565b8160cf5461064a9190611ce4565b60cf5560cb546040805163f6326fb360e01b815290516001600160a01b039092169163f6326fb3918591600480830192600092919082900301818588803b15801561069457600080fd5b505af11580156106a8573d6000803e3d6000fd5b505060ca546040516340c10f1960e01b8152336004820152602481018690526001600160a01b0390911693506340c10f1992506044019050600060405180830381600087803b1580156106fa57600080fd5b505af115801561070e573d6000803e3d6000fd5b505060408051858152602081018590523393507f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca92500160405180910390a250506107596001606555565b565b600054610100900460ff161580801561077b5750600054600160ff909116105b806107955750303b158015610795575060005460ff166001145b6107f85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610606565b6000805460ff19166001179055801561081b576000805461ff0019166101001790555b6001600160a01b0388166108615760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420764554483160981b6044820152606401610606565b6001600160a01b0387166108a75760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103b22aa241960991b6044820152606401610606565b6001600160a01b0386166108fd5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420534c50206465706f736974206164647265737300000000006044820152606401610606565b6001600160a01b0385166109535760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964204d4556207661756c742061646472657373000000000000006044820152606401610606565b6001600160a01b0384166109a95760405162461bcd60e51b815260206004820181905260248201527f496e76616c6964207769746864726177616c207661756c7420616464726573736044820152606401610606565b6000876001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0d9190611cfd565b11610a5a5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420746f74616c537570706c79206f66207645544832000000006044820152606401610606565b610a62611536565b610a6a611565565b610a72611594565b610a7b826115c3565b610a8483611619565b60c980546001600160a01b03808b166001600160a01b03199283161790925560ca80548a8416908316811790915560cb80548a851690841617905560cc805489851690841617905560cd805493881693909216929092179055604080516318160ddd60e01b815290516318160ddd916004808201926020929091908290030181865afa158015610b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3c9190611cfd565b60cf558015610b85576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b610b97611691565b6107596116eb565b610ba7611691565b610bb0816115c3565b50565b6001600160a01b038116600090815260d360209081526040808320815180830190925280548083526001909101549282019290925290610bf1610d5d565b11610bff5750600092915050565b8051600090610c0c610d5d565b610c169190611d16565b9050804710610c255780610c27565b475b905080826020015110610c3a5780610c40565b81602001515b949350505050565b610c50611490565b610c586114e9565b60008111610c785760405162461bcd60e51b815260040161060690611ca9565b806000610c8482611236565b90508160cf54610c949190611ce4565b60cf5560c954610cb1906001600160a01b03163361dead8561173d565b60ca546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015610cfd57600080fd5b505af1158015610d11573d6000803e3d6000fd5b505060408051858152602081018590523393507f9f1eab6cdd1daff5126e5746868327717314baefd3abd72422a3064e1300279c9250015b60405180910390a25050610bb06001606555565b600060d25447610d6d9190611ce4565b905090565b610d7a611691565b610759600061179d565b610d8c611490565b610d946114e9565b60008111610db45760405162461bcd60e51b815260040161060690611ca9565b33600090815260d36020526040812090610dcd83611040565b905060008111610def5760405162461bcd60e51b815260040161060690611ca9565b816001015460d154610e019190611d16565b82556001820154610e13908290611ce4565b600183015560d154610e26908290611ce4565b60d15560cf54610e37908290611d16565b60cf5560ca54604051632770a7eb60e21b8152336004820152602481018590526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610e8657600080fd5b505af1158015610e9a573d6000803e3d6000fd5b505060408051848152602081018790523393507f24b91f4f47caf44230a57777a9be744924e82bf666f2d5702faf97df35e60f9f925001610d49565b60cc546001600160a01b0316331480610ef9575060cd546001600160a01b031633145b610f455760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f74207661756c7420636f6e7472616374000000006044820152606401610606565b6000670de0b6b3a764000060d05483610f5e9190611d29565b610f689190611d40565b90506000610f7582611236565b90508260cf54610f859190611ce4565b60cf5560ca5460ce546040516340c10f1960e01b81526001600160a01b039182166004820152602481018490529116906340c10f1990604401600060405180830381600087803b158015610fd857600080fd5b505af1158015610fec573d6000803e3d6000fd5b505060408051868152602081018590523393507f6a6f77044107a33658235d41bedbbaf2fe9ccdceb313143c947a5e76e1ec847492500160405180910390a2505050565b611038611691565b6107596117ef565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ba9190611cfd565b90508060cf54846110cb9190611d29565b6110d59190611d40565b9392505050565b6110e4611490565b6110ec6114e9565b33600090815260d3602052604081209082900361110b57806001015491505b806001015482111561115f5760405162461bcd60e51b815260206004820152601760248201527f457863656564207065726d697474656420616d6f756e740000000000000000006044820152606401610606565b61116833610bb3565b8211156111b75760405162461bcd60e51b815260206004820152601e60248201527f496e73756666696369656e74207769746864726177616c20616d6f756e7400006044820152606401610606565b8181600101546111c79190611d16565b600182015580546111d9908390611ce4565b815560d2546111e9908390611ce4565b60d2556111f6338361182c565b60405182815233907f1a39b9c5044b9f0ff56c5951e30c1ebe24911353aafcceb9250e83a24fe158c49060200160405180910390a250610bb06001606555565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561128c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b09190611cfd565b60cf549091506110cb8285611d29565b60cc546001600160a01b03163314806112e3575060cd546001600160a01b031633145b61132f5760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f74207661756c7420636f6e7472616374000000006044820152606401610606565b8060cf5461133d9190611d16565b60cf5560405181815233907fccdd1b4597f1516187e25b38fbad3e75a428981d2a1d898667abb3cdd95a672f9060200160405180910390a250565b60cd546001600160a01b031633146113d25760405162461bcd60e51b815260206004820181905260248201527f496e76616c6964207769746864726177616c207661756c7420616464726573736044820152606401610606565b60405134815233907f0a89b53a0597c8291bcd6a87acb5dc18d0123915629a55c470bfbfd4680f591e9060200160405180910390a2565b611411611691565b610bb081611619565b611422611691565b6001600160a01b0381166114875760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610606565b610bb08161179d565b6002606554036114e25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610606565b6002606555565b60975460ff16156107595760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610606565b6001606555565b600054610100900460ff1661155d5760405162461bcd60e51b815260040161060690611d62565b610759611912565b600054610100900460ff1661158c5760405162461bcd60e51b815260040161060690611d62565b610759611942565b600054610100900460ff166115bb5760405162461bcd60e51b815260040161060690611d62565b610759611969565b670de0b6b3a76400008111156116145760405162461bcd60e51b8152602060048201526016602482015275466565207261746520657863656564732072616e676560501b6044820152606401610606565b60d055565b6001600160a01b03811661166f5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964206665652072656365697665722061646472657373000000006044820152606401610606565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146107595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610606565b6116f361199c565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526117979085906119e5565b50505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6117f76114e9565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117203390565b804710156118735760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610606565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146118c0576040519150601f19603f3d011682016040523d82523d6000602084013e6118c5565b606091505b505090508061190d5760405162461bcd60e51b8152602060048201526014602482015273556e61626c6520746f2073656e642076616c756560601b6044820152606401610606565b505050565b600054610100900460ff166119395760405162461bcd60e51b815260040161060690611d62565b6107593361179d565b600054610100900460ff1661152f5760405162461bcd60e51b815260040161060690611d62565b600054610100900460ff166119905760405162461bcd60e51b815260040161060690611d62565b6097805460ff19169055565b60975460ff166107595760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610606565b6000611a3a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ab79092919063ffffffff16565b80519091501561190d5780806020019051810190611a589190611dad565b61190d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610606565b6060610c40848460008585600080866001600160a01b03168587604051611ade9190611df3565b60006040518083038185875af1925050503d8060008114611b1b576040519150601f19603f3d011682016040523d82523d6000602084013e611b20565b606091505b5091509150611b3187838387611b3c565b979650505050505050565b60608315611bab578251600003611ba4576001600160a01b0385163b611ba45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610606565b5081610c40565b610c408383815115611bc05781518083602001fd5b8060405162461bcd60e51b81526004016106069190611e0f565b80356001600160a01b0381168114611bf157600080fd5b919050565b600080600080600080600060e0888a031215611c1157600080fd5b611c1a88611bda565b9650611c2860208901611bda565b9550611c3660408901611bda565b9450611c4460608901611bda565b9350611c5260808901611bda565b9250611c6060a08901611bda565b915060c0880135905092959891949750929550565b600060208284031215611c8757600080fd5b5035919050565b600060208284031215611ca057600080fd5b6110d582611bda565b6020808252600b908201526a16995c9bc8185b5bdd5b9d60aa1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115611cf757611cf7611cce565b92915050565b600060208284031215611d0f57600080fd5b5051919050565b81810381811115611cf757611cf7611cce565b8082028115828204841417611cf757611cf7611cce565b600082611d5d57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611dbf57600080fd5b815180151581146110d557600080fd5b60005b83811015611dea578181015183820152602001611dd2565b50506000910152565b60008251611e05818460208701611dcf565b9190910192915050565b6020815260008251806020840152611e2e816040850160208701611dcf565b601f01601f1916919091016040019291505056fea2646970667358221220ef5625298a090cb94d63dc2a7d2cb87db23ebdda4d73cd57db6b9874da3741f264736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c8063715018a61161010d578063a24bcf46116100a0578063c553173f1161006f578063c553173f14610550578063d35249c814610570578063efdcd97414610578578063f2fde38b14610598578063f922c0d0146105b857600080fd5b8063a24bcf46146104d0578063abc9653e146104f0578063b179b46514610510578063b3f006741461053057600080fd5b80638456cb59116100dc5780638456cb59146104715780638da5cb5b14610486578063978bbdb9146104a4578063996e5c06146104ba57600080fd5b8063715018a6146103d357806374899a7e146103e857806374de4ec4146104085780637a9262a21461042857600080fd5b80634e6fd6c4116101855780635c975abb116101545780635c975abb146103655780635f4c71f11461038857806363ea1b921461039d57806369d42148146103b357600080fd5b80634e6fd6c4146102f357806352a630b9146103095780635a70ad28146103295780635baa75091461034557600080fd5b80631ec01fcd116101c15780631ec01fcd1461027e57806322f808d51461029e5780633f4ba83a146102be57806345596e2e146102d357600080fd5b8063104e9929146101f35780631249c58b1461021c5780631460e39014610226578063193a225c14610246575b600080fd5b3480156101ff57600080fd5b5061020960cf5481565b6040519081526020015b60405180910390f35b6102246105d8565b005b34801561023257600080fd5b50610224610241366004611bf6565b61075b565b34801561025257600080fd5b5060ca54610266906001600160a01b031681565b6040516001600160a01b039091168152602001610213565b34801561028a57600080fd5b5060c954610266906001600160a01b031681565b3480156102aa57600080fd5b5060cb54610266906001600160a01b031681565b3480156102ca57600080fd5b50610224610b8f565b3480156102df57600080fd5b506102246102ee366004611c75565b610b9f565b3480156102ff57600080fd5b5061026661dead81565b34801561031557600080fd5b50610209610324366004611c8e565b610bb3565b34801561033557600080fd5b50610209670de0b6b3a764000081565b34801561035157600080fd5b50610224610360366004611c75565b610c48565b34801561037157600080fd5b5060975460ff166040519015158152602001610213565b34801561039457600080fd5b50610209610d5d565b3480156103a957600080fd5b5061020960d25481565b3480156103bf57600080fd5b5060cd54610266906001600160a01b031681565b3480156103df57600080fd5b50610224610d72565b3480156103f457600080fd5b50610224610403366004611c75565b610d84565b34801561041457600080fd5b50610224610423366004611c75565b610ed6565b34801561043457600080fd5b5061045c610443366004611c8e565b60d3602052600090815260409020805460019091015482565b60408051928352602083019190915201610213565b34801561047d57600080fd5b50610224611030565b34801561049257600080fd5b506033546001600160a01b0316610266565b3480156104b057600080fd5b5061020960d05481565b3480156104c657600080fd5b5061020960d15481565b3480156104dc57600080fd5b506102096104eb366004611c75565b611040565b3480156104fc57600080fd5b5061022461050b366004611c75565b6110dc565b34801561051c57600080fd5b5061020961052b366004611c75565b611236565b34801561053c57600080fd5b5060ce54610266906001600160a01b031681565b34801561055c57600080fd5b5061022461056b366004611c75565b6112c0565b610224611378565b34801561058457600080fd5b50610224610593366004611c8e565b611409565b3480156105a457600080fd5b506102246105b3366004611c8e565b61141a565b3480156105c457600080fd5b5060cc54610266906001600160a01b031681565b6105e0611490565b6105e86114e9565b348061060f5760405162461bcd60e51b815260040161060690611ca9565b60405180910390fd5b600061061a82611236565b90506000811161063c5760405162461bcd60e51b815260040161060690611ca9565b8160cf5461064a9190611ce4565b60cf5560cb546040805163f6326fb360e01b815290516001600160a01b039092169163f6326fb3918591600480830192600092919082900301818588803b15801561069457600080fd5b505af11580156106a8573d6000803e3d6000fd5b505060ca546040516340c10f1960e01b8152336004820152602481018690526001600160a01b0390911693506340c10f1992506044019050600060405180830381600087803b1580156106fa57600080fd5b505af115801561070e573d6000803e3d6000fd5b505060408051858152602081018590523393507f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca92500160405180910390a250506107596001606555565b565b600054610100900460ff161580801561077b5750600054600160ff909116105b806107955750303b158015610795575060005460ff166001145b6107f85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610606565b6000805460ff19166001179055801561081b576000805461ff0019166101001790555b6001600160a01b0388166108615760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420764554483160981b6044820152606401610606565b6001600160a01b0387166108a75760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103b22aa241960991b6044820152606401610606565b6001600160a01b0386166108fd5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420534c50206465706f736974206164647265737300000000006044820152606401610606565b6001600160a01b0385166109535760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964204d4556207661756c742061646472657373000000000000006044820152606401610606565b6001600160a01b0384166109a95760405162461bcd60e51b815260206004820181905260248201527f496e76616c6964207769746864726177616c207661756c7420616464726573736044820152606401610606565b6000876001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0d9190611cfd565b11610a5a5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c696420746f74616c537570706c79206f66207645544832000000006044820152606401610606565b610a62611536565b610a6a611565565b610a72611594565b610a7b826115c3565b610a8483611619565b60c980546001600160a01b03808b166001600160a01b03199283161790925560ca80548a8416908316811790915560cb80548a851690841617905560cc805489851690841617905560cd805493881693909216929092179055604080516318160ddd60e01b815290516318160ddd916004808201926020929091908290030181865afa158015610b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3c9190611cfd565b60cf558015610b85576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b610b97611691565b6107596116eb565b610ba7611691565b610bb0816115c3565b50565b6001600160a01b038116600090815260d360209081526040808320815180830190925280548083526001909101549282019290925290610bf1610d5d565b11610bff5750600092915050565b8051600090610c0c610d5d565b610c169190611d16565b9050804710610c255780610c27565b475b905080826020015110610c3a5780610c40565b81602001515b949350505050565b610c50611490565b610c586114e9565b60008111610c785760405162461bcd60e51b815260040161060690611ca9565b806000610c8482611236565b90508160cf54610c949190611ce4565b60cf5560c954610cb1906001600160a01b03163361dead8561173d565b60ca546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015610cfd57600080fd5b505af1158015610d11573d6000803e3d6000fd5b505060408051858152602081018590523393507f9f1eab6cdd1daff5126e5746868327717314baefd3abd72422a3064e1300279c9250015b60405180910390a25050610bb06001606555565b600060d25447610d6d9190611ce4565b905090565b610d7a611691565b610759600061179d565b610d8c611490565b610d946114e9565b60008111610db45760405162461bcd60e51b815260040161060690611ca9565b33600090815260d36020526040812090610dcd83611040565b905060008111610def5760405162461bcd60e51b815260040161060690611ca9565b816001015460d154610e019190611d16565b82556001820154610e13908290611ce4565b600183015560d154610e26908290611ce4565b60d15560cf54610e37908290611d16565b60cf5560ca54604051632770a7eb60e21b8152336004820152602481018590526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610e8657600080fd5b505af1158015610e9a573d6000803e3d6000fd5b505060408051848152602081018790523393507f24b91f4f47caf44230a57777a9be744924e82bf666f2d5702faf97df35e60f9f925001610d49565b60cc546001600160a01b0316331480610ef9575060cd546001600160a01b031633145b610f455760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f74207661756c7420636f6e7472616374000000006044820152606401610606565b6000670de0b6b3a764000060d05483610f5e9190611d29565b610f689190611d40565b90506000610f7582611236565b90508260cf54610f859190611ce4565b60cf5560ca5460ce546040516340c10f1960e01b81526001600160a01b039182166004820152602481018490529116906340c10f1990604401600060405180830381600087803b158015610fd857600080fd5b505af1158015610fec573d6000803e3d6000fd5b505060408051868152602081018590523393507f6a6f77044107a33658235d41bedbbaf2fe9ccdceb313143c947a5e76e1ec847492500160405180910390a2505050565b611038611691565b6107596117ef565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ba9190611cfd565b90508060cf54846110cb9190611d29565b6110d59190611d40565b9392505050565b6110e4611490565b6110ec6114e9565b33600090815260d3602052604081209082900361110b57806001015491505b806001015482111561115f5760405162461bcd60e51b815260206004820152601760248201527f457863656564207065726d697474656420616d6f756e740000000000000000006044820152606401610606565b61116833610bb3565b8211156111b75760405162461bcd60e51b815260206004820152601e60248201527f496e73756666696369656e74207769746864726177616c20616d6f756e7400006044820152606401610606565b8181600101546111c79190611d16565b600182015580546111d9908390611ce4565b815560d2546111e9908390611ce4565b60d2556111f6338361182c565b60405182815233907f1a39b9c5044b9f0ff56c5951e30c1ebe24911353aafcceb9250e83a24fe158c49060200160405180910390a250610bb06001606555565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561128c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b09190611cfd565b60cf549091506110cb8285611d29565b60cc546001600160a01b03163314806112e3575060cd546001600160a01b031633145b61132f5760405162461bcd60e51b815260206004820152601c60248201527f43616c6c6572206973206e6f74207661756c7420636f6e7472616374000000006044820152606401610606565b8060cf5461133d9190611d16565b60cf5560405181815233907fccdd1b4597f1516187e25b38fbad3e75a428981d2a1d898667abb3cdd95a672f9060200160405180910390a250565b60cd546001600160a01b031633146113d25760405162461bcd60e51b815260206004820181905260248201527f496e76616c6964207769746864726177616c207661756c7420616464726573736044820152606401610606565b60405134815233907f0a89b53a0597c8291bcd6a87acb5dc18d0123915629a55c470bfbfd4680f591e9060200160405180910390a2565b611411611691565b610bb081611619565b611422611691565b6001600160a01b0381166114875760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610606565b610bb08161179d565b6002606554036114e25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610606565b6002606555565b60975460ff16156107595760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610606565b6001606555565b600054610100900460ff1661155d5760405162461bcd60e51b815260040161060690611d62565b610759611912565b600054610100900460ff1661158c5760405162461bcd60e51b815260040161060690611d62565b610759611942565b600054610100900460ff166115bb5760405162461bcd60e51b815260040161060690611d62565b610759611969565b670de0b6b3a76400008111156116145760405162461bcd60e51b8152602060048201526016602482015275466565207261746520657863656564732072616e676560501b6044820152606401610606565b60d055565b6001600160a01b03811661166f5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c6964206665652072656365697665722061646472657373000000006044820152606401610606565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146107595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610606565b6116f361199c565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526117979085906119e5565b50505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6117f76114e9565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117203390565b804710156118735760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610606565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146118c0576040519150601f19603f3d011682016040523d82523d6000602084013e6118c5565b606091505b505090508061190d5760405162461bcd60e51b8152602060048201526014602482015273556e61626c6520746f2073656e642076616c756560601b6044820152606401610606565b505050565b600054610100900460ff166119395760405162461bcd60e51b815260040161060690611d62565b6107593361179d565b600054610100900460ff1661152f5760405162461bcd60e51b815260040161060690611d62565b600054610100900460ff166119905760405162461bcd60e51b815260040161060690611d62565b6097805460ff19169055565b60975460ff166107595760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610606565b6000611a3a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ab79092919063ffffffff16565b80519091501561190d5780806020019051810190611a589190611dad565b61190d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610606565b6060610c40848460008585600080866001600160a01b03168587604051611ade9190611df3565b60006040518083038185875af1925050503d8060008114611b1b576040519150601f19603f3d011682016040523d82523d6000602084013e611b20565b606091505b5091509150611b3187838387611b3c565b979650505050505050565b60608315611bab578251600003611ba4576001600160a01b0385163b611ba45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610606565b5081610c40565b610c408383815115611bc05781518083602001fd5b8060405162461bcd60e51b81526004016106069190611e0f565b80356001600160a01b0381168114611bf157600080fd5b919050565b600080600080600080600060e0888a031215611c1157600080fd5b611c1a88611bda565b9650611c2860208901611bda565b9550611c3660408901611bda565b9450611c4460608901611bda565b9350611c5260808901611bda565b9250611c6060a08901611bda565b915060c0880135905092959891949750929550565b600060208284031215611c8757600080fd5b5035919050565b600060208284031215611ca057600080fd5b6110d582611bda565b6020808252600b908201526a16995c9bc8185b5bdd5b9d60aa1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115611cf757611cf7611cce565b92915050565b600060208284031215611d0f57600080fd5b5051919050565b81810381811115611cf757611cf7611cce565b8082028115828204841417611cf757611cf7611cce565b600082611d5d57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611dbf57600080fd5b815180151581146110d557600080fd5b60005b83811015611dea578181015183820152602001611dd2565b50506000910152565b60008251611e05818460208701611dcf565b9190910192915050565b6020815260008251806020840152611e2e816040850160208701611dcf565b601f01601f1916919091016040019291505056fea2646970667358221220ef5625298a090cb94d63dc2a7d2cb87db23ebdda4d73cd57db6b9874da3741f264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1220,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 441,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 499,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3217,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "vETH1",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 3219,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "vETH2",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 3221,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "slpDeposit",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 3223,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "mevVault",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 3225,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "withdrawalVault",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 3227,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 3229,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "tokenPool",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 3231,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "feeRate",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 3233,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "queuedWithdrawal",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 3235,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "completedWithdrawal",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 3240,
        "contract": "contracts/SLPCore.sol:SLPCore",
        "label": "withdrawals",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_struct(Withdrawal)3159_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Withdrawal)3159_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SLPCore.Withdrawal)",
        "numberOfBytes": "32",
        "value": "t_struct(Withdrawal)3159_storage"
      },
      "t_struct(Withdrawal)3159_storage": {
        "encoding": "inplace",
        "label": "struct SLPCore.Withdrawal",
        "members": [
          {
            "astId": 3156,
            "contract": "contracts/SLPCore.sol:SLPCore",
            "label": "queued",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3158,
            "contract": "contracts/SLPCore.sol:SLPCore",
            "label": "pending",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}